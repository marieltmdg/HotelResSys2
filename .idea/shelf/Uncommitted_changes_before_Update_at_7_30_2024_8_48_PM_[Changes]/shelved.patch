Index: basepack/Hotel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package basepack;\r\n\r\nimport basepack.roompack.*;\r\n\r\nimport java.io.Serializable;\r\nimport java.text.DecimalFormat;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * The Hotel class represents a hotel with a name, a room count, and a list of rooms.\r\n */\r\npublic class Hotel implements Serializable {\r\n    private String hotelName;\r\n    private int roomCount;\r\n    private ArrayList<Room> roomList;\r\n\r\n    /**\r\n     * Constructs a Hotel instance with the specified hotel name.\r\n     * Initializes the room count to 0 and adds an initial room to the room list.\r\n     *\r\n     * @param hotelName The name of the hotel.\r\n     */\r\n    public Hotel(String hotelName) {\r\n        this.hotelName = hotelName;\r\n        this.roomCount = 0;\r\n        this.roomList = new ArrayList<Room>();\r\n    }\r\n    \r\n    /**\r\n     * The method getHotelName() returns the name of a hotel.\r\n     * \r\n     * @return The method getHotelName() is returning the value of the variable hotelName\r\n     */\r\n    public String getHotelName() {\r\n        return hotelName;\r\n    }\r\n\r\n    /**\r\n     * The method getRoomCount() returns the number of rooms.\r\n     * \r\n     * @return The method getRoomCount is returning the value of the variable roomCount\r\n     */\r\n    public int getRoomCount() {\r\n        return roomCount;\r\n    }\r\n\r\n   /**\r\n    * The method getRoomList() returns the list of the Room objects in the hotel.\r\n    * \r\n    * @return The list of the Room objects of the hotel\r\n    */\r\n    public ArrayList<Room> getRoomList() {\r\n        return roomList;\r\n    }\r\n\r\n    /**\r\n    * The method getRoom() returns an instance of Room object in the roomList.\r\n    * \r\n    * @param index is the index of the Room in the list\r\n    * @return The specified Room object of the roomList\r\n    */\r\n    public Room getRoom(int index) {\r\n        return roomList.get(index);\r\n    }\r\n\r\n    public int getRoomTypeCount(String type){\r\n        int total = 0;\r\n\r\n        switch(type){\r\n            case \"Standard\":\r\n                for(Room r : roomList){\r\n                    if (r instanceof Standard){\r\n                        total++;\r\n                    }\r\n                }\r\n                break;\r\n            case \"Deluxe\":\r\n                for(Room r : roomList){\r\n                    if (r instanceof Deluxe){\r\n                        total++;\r\n                    }\r\n                }\r\n                break;\r\n            case \"Executive\":\r\n                for(Room r : roomList){\r\n                    if (r instanceof Executive){\r\n                        total++;\r\n                    }\r\n                }\r\n                break;\r\n        }\r\n\r\n        return total;\r\n    }\r\n\r\n    /**\r\n     * The generateRoomName() method generates a room name based on the room count, with a leading number calculated\r\n     * from the room count divided by 10 plus 1, followed by a hyphen and the room count modulo 10.\r\n     *\r\n     * @param type is the room type of the room.\r\n     * @return The generateRoomName method returns a String with a unique room name.\r\n     */\r\n    private String generateRoomName(String type){\r\n        int leadingNum = (roomCount / 10) + 1;\r\n\r\n        switch(type){\r\n            case \"Standard\":\r\n                return \"S\" + leadingNum + \"-\" + roomCount % 10;\r\n            case \"Deluxe\":\r\n                return \"D\" + leadingNum + \"-\" + roomCount % 10;\r\n            case \"Executive\":\r\n                return \"E\" + leadingNum + \"-\" + roomCount % 10;\r\n        }\r\n        return \"\\0\";\r\n    }\r\n\r\n    /**\r\n     * The getReservationCount() method calculates the total number of reservations across all rooms in a roomList.\r\n     * \r\n     * @return The getReservationCount method returns the total number of reservations across all\r\n     * rooms in the roomList.\r\n     */\r\n    public int getReservationCount() {\r\n        int resCount = 0;\r\n        //iterate through each room and count the reservations\r\n        for(int i = 0; i < roomList.size();i++){\r\n            if(!(roomList.get(i).getReservationList().isEmpty())){\r\n                resCount = resCount + roomList.get(i).getReservationList().size();\r\n                } \r\n            }  \r\n        return resCount;\r\n    }\r\n\r\n    /**\r\n     * The method setHotelName() sets a new name for a hotel.\r\n     * \r\n     * @param newName The parameter newName represents the new name that will be assigned to the hotelName.\r\n     */\r\n    public void setHotelName(String newName) {\r\n        this.hotelName = newName;\r\n    }\r\n\r\n    /**\r\n     * The method addStandardRoom() adds a new standard room object, provided the room count is less than 50,\r\n     * and gives it a unique name.\r\n     */\r\n    public void addStandardRoom(){\r\n        String roomName = generateRoomName(\"Standard\");\r\n        Standard newRoom = new Standard(roomName);\r\n\r\n        //check if the room size has not yet reached capacity\r\n        if(roomList.size() < 50){\r\n            roomList.add(newRoom);\r\n            roomCount++;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The method addDeluxeRoom() adds a new deluxe room object, provided the room count is less than 50,\r\n     * and gives it a unique name.\r\n     */\r\n    public void addDeluxeRoom(){\r\n        String roomName = generateRoomName(\"Deluxe\");\r\n        Deluxe newRoom = new Deluxe(roomName);\r\n\r\n        //check if the room size has not yet reached capacity\r\n        if(roomList.size() < 50){\r\n            roomList.add(newRoom);\r\n            roomCount++;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The method addExecRoom() adds a new executive room object, provided the room count is less than 50,\r\n     * and gives it a unique name.\r\n     */\r\n    public void addExecRoom(){\r\n        String roomName = generateRoomName(\"Executive\");\r\n        Executive newRoom = new Executive(roomName);\r\n\r\n        //check if the room size has not yet reached capacity\r\n        if(roomList.size() < 50){\r\n            roomList.add(newRoom);\r\n            roomCount++;\r\n        }\r\n    }\r\n\r\n   /**\r\n    * The removeRoom() method removes a room from a list if it exists has no reservations, and the room count\r\n    * is greater than 1.\r\n    * \r\n    * @param index The index of the room in the roomList that will be removed.\r\n    * @return string result of the removal\r\n    */\r\n    public String removeRoom(int index){\r\n        //check if the room exists\r\n        if (roomList.contains(roomList.get(index))){\r\n            if(roomList.get(index).getReservationList().isEmpty() && roomList.size() > 1){\r\n                roomList.remove(roomList.get(index));\r\n                roomCount--;\r\n                return \"Room Removal Successful\";\r\n            } else if (roomList.get(index).getReservationList().isEmpty() && roomList.size() == 1) {\r\n                //check if there is only one room left, and do not continue removal\r\n               return \"Room \" + roomList.get(index).getRoomName() + \" not deleted. Hotels must have atleast one room\";\r\n            }else \r\n                //check if there is a reservation, and do not continue removal\r\n                return \"Room \" + roomList.get(index).getRoomName() + \" not deleted. Has a reservation\";\r\n        } else return \"Room \" + roomList.get(index).getRoomName() + \" does not exist\";\r\n    }\r\n\r\n    /**\r\n     * The updatePrice() method sets the base price for all rooms in a list to a specified value and\r\n     * prints a confirmation message.\r\n     * \r\n     * @param price The price represents the new base price that will be set for all rooms in the roomList.\r\n     * @return String feedback message.\r\n     */\r\n    public String updatePrice(double price){\r\n        //set the base price for all rooms to the new price\r\n        for(int i=0; i<roomList.size(); i++)\r\n            roomList.get(i).setBasePrice(price);\r\n\r\n        return \"Room price set to \"+ price;\r\n    }\r\n\r\n    /**\r\n     * The updateDatePrice() method sets the date price modifier for a specific date.\r\n     *\r\n     * @param index is the date the price would be set.\r\n     * @param percent is the percent modifier that will be set.\r\n     */\r\n    public void updateDatePrice(int index, double percent){\r\n        //set the base price for all rooms to the new price\r\n        for(int i=0; i<roomList.size(); i++)\r\n            roomList.get(i).setDatePrice(index, percent);\r\n\r\n    }\r\n\r\n    /**\r\n     * The addHotelReservation() method adds a reservation for a guest with specified check-in and\r\n     * check-out dates to an available room in a hotel.\r\n     * \r\n     * @param name The name of the person making the hotel reservation.\r\n     * @param checkIn The checkIn parameter represents the check-in date for the hotel reservation.\r\n     * @param checkOut The checkOut parameter represents the check-out date for a hotel reservation.\r\n     * @return String display feedback message.\r\n     */\r\n    public String addHotelReservation(String name, int checkIn, int checkOut, int roomIndex, String[] breakdown){\r\n            //add reservation if there are available rooms\r\n            if(roomList.get(roomIndex).isAvailable(checkIn, checkOut)){\r\n                roomList.get(roomIndex).addReservation(name, checkIn, checkOut, breakdown);\r\n                return \"Reservation successful for \" + name;\r\n            } else {\r\n                return \"Room is not available for selected dates\";\r\n            }\r\n    }\r\n\r\n    /**\r\n     * The removeHotelReservation() method removes a reservation from a specific room in a hotel.\r\n     * \r\n     * @param roomIndex The roomIndex parameter represents the index of the room in the roomList.\r\n     * @param resIndex The resIndex parameter represents the index of the reservation to be removed.\r\n     * @return String message if successful or not.\r\n     */\r\n    public String removeHotelReservation(int roomIndex, int resIndex){\r\n        if (roomIndex >= 0 && roomIndex < roomCount)\r\n            return roomList.get(roomIndex).removeReservation(resIndex);\r\n        else return \"Room input out of bounds\";\r\n    }\r\n\r\n    /**\r\n     * The getHotelIncome() method calculates the total income generated from all room reservations\r\n     * in a hotel.\r\n     * \r\n     * @return String display feedback message.\r\n     */\r\n    public double getHotelIncome(){\r\n        double sum = 0;\r\n        \r\n        //sum all reservation total prices\r\n        for(Room r : roomList){\r\n            sum += r.getTotalReservationPrice();\r\n            \r\n        }\r\n\r\n        DecimalFormat df = new DecimalFormat(\"#0.00\");      \r\n        sum = Double.valueOf(df.format(sum));\r\n        \r\n        return sum;\r\n    }\r\n\r\n    /**\r\n     * Retrieves the details of the hotel, including the hotel name, room count, and reservation count.\r\n     *\r\n     * @return A string array containing the hotel details:\r\n     *         details[0] - Hotel name\r\n     *         details[1] - Room count\r\n     *         details[2] - Reservation count\r\n     */\r\n    public String[] getHotelDetails() {\r\n        String[] details = new String[3];\r\n        details[0] = this.getHotelName(); // Assuming getHotelName() method exists\r\n        details[1] = String.valueOf(this.getRoomCount()); // Assuming getRoomCount() method exists\r\n        details[2] = String.valueOf(this.getReservationCount()); // Assuming getReservationCount() method exists\r\n        return details;\r\n    }\r\n\r\n    /**\r\n     * The method getBasePrice() gets the base price of the hotel.\r\n     *\r\n     * @return The base price of the hotel.\r\n     */\r\n    public double getBasePrice(){\r\n        return roomList.get(0).getBasePrice();\r\n    }\r\n\r\n    public double getPricePerType(int index) {\r\n        if (roomList.get(index) instanceof Standard) {\r\n            return ((Standard) roomList.get(index)).getBasePrice();\r\n        } else if (roomList.get(index) instanceof Deluxe) {\r\n            return ((Deluxe) roomList.get(index)).getDPrice();\r\n        } else if (roomList.get(index) instanceof Executive) {\r\n            return ((Executive) roomList.get(index)).getEPrice();\r\n        }\r\n        return roomList.get(0).getBasePrice();\r\n    }\r\n\r\n    /**\r\n     * The method getAllDatePrice() gets the complete date price multiplier per date.\r\n     *\r\n     * @return The list of the price multiplier per date.\r\n     */\r\n    public double[] getAllDatePrice(){\r\n        double ret[] = new double[30];\r\n\r\n        for(int i = 0 ; i < 30; i++){\r\n            ret[i] = roomList.get(0).getDatePricePercent(i);\r\n        }\r\n\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * The method getReservationListDetailed() gets reservation details for all rooms.\r\n     *\r\n     * @return The detailed list of the reservation details per room.\r\n     */\r\n    public String[][] getReservationListDetailed(){\r\n\r\n        String[][] ret = new String[getRoomCount()][30];\r\n\r\n        for(int i = 0 ; i < roomList.size() ; i++)\r\n            for(int j = 0; j < roomList.get(i).getReservationListCount(); j++)\r\n                ret[i][j] = roomList.get(i).getRoomName() +\r\n                        \" \" + roomList.get(i).getReservationName(j) + \" Date:\" + roomList.get(i).getResDates(j);\r\n\r\n        return ret;\r\n    }\r\n\r\n    public String[] getAvailableDatesForRoom(int index){\r\n        return roomList.get(index).printAvailability();\r\n    }\r\n\r\n    /**\r\n     * The method checkNumAvailableRooms() iterates through a list of rooms and counts the number of\r\n     * rooms available for a specific date.\r\n     * \r\n     * @param date The date for which one wants to check the availability of rooms.\r\n     * @return The number of available rooms for a given date.\r\n     */\r\n    public int checkNumAvailableRooms(int date){\r\n        int ctr = 0;\r\n\r\n        for(Room r: roomList){\r\n            if(r.isAvailable(date, date+1))\r\n                ctr++;\r\n        }\r\n        return ctr;\r\n    }\r\n\r\n    /**\r\n     * The method checkNumBookedRooms() counts the number of rooms that are not available for booking\r\n     * on a specific date.\r\n     * \r\n     * @param date The date for which you want to check the availability of rooms. \r\n     * @return The method is returning the number of booked rooms for a specific date.\r\n     */\r\n    public int checkNumBookedRooms(int date){\r\n         int ctr = 0;\r\n\r\n        for(Room r: roomList){\r\n            if(!(r.isAvailable(date, date+1)))\r\n                ctr++;\r\n        }\r\n        return ctr;\r\n    }\r\n\r\n    /**\r\n     * The method checkForReservations() counts the number of rooms that are not available for booking\r\n     * on a specific date.\r\n     * \r\n     * @return The method is returning whether there is any reservation in a hotel.\r\n     */\r\n    public boolean checkForReservations(){\r\n        //iterate through all dates and check if available\r\n        for(int date = 1; date < 31; date++){\r\n            for(Room r: roomList){\r\n                if(!(r.isAvailable(date, date+1)))\r\n                    return true;\r\n            }\r\n        \r\n        }\r\n        return false; \r\n    }\r\n\r\n    /**\r\n     * The method printRoomStates() prints the available and booked rooms, given a date.\r\n     * \r\n     * @param date The date to check.\r\n     */\r\n    public void printRoomStates(int date){\r\n        System.out.println(\"Available Rooms: \" + checkNumAvailableRooms(date));\r\n        System.out.println(\"Reserved Rooms: \" + checkNumBookedRooms(date));\r\n    }\r\n\r\n    /**\r\n     * The method printReservation() prints the room name, price per night, and available check-in dates\r\n     * for a room.\r\n     * \r\n     * @param roomIndex The index of the room.\r\n     * @param resIndex The index of the reservation.\r\n     */\r\n    public String[] printReservation(int roomIndex, int resIndex){\r\n        return roomList.get(roomIndex).printReservation(resIndex);\r\n    }\r\n\r\n    /**\r\n     * The method getRoomName() gets the room name, given an index.\r\n     *\r\n     * @param roomIndex The index from which the room name will be retrieved.\r\n     * @return The room name.\r\n     */\r\n    public String getRoomName(int roomIndex){\r\n        return roomList.get(roomIndex).getRoomName();\r\n    }\r\n\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/basepack/Hotel.java b/basepack/Hotel.java
--- a/basepack/Hotel.java	(revision f8a1adc008d05537f56a653397a2d0d2537147f7)
+++ b/basepack/Hotel.java	(date 1722343475517)
@@ -63,6 +63,12 @@
         return roomList.get(index);
     }
 
+    /**
+     * Returns the count of rooms of a specific type in the hotel.
+     *
+     * @param  type  the type of room to count ("Standard", "Deluxe", or "Executive")
+     * @return       the total number of rooms of the specified type
+     */
     public int getRoomTypeCount(String type){
         int total = 0;
 
@@ -282,7 +288,7 @@
             sum += r.getTotalReservationPrice();
             
         }
-
+        //round to 2 decimal places
         DecimalFormat df = new DecimalFormat("#0.00");      
         sum = Double.valueOf(df.format(sum));
         
Index: mvcpack/Model.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package mvcpack;\r\nimport basepack.*;\r\nimport basepack.roompack.*;\r\n\r\nimport java.util.ArrayList;\r\nimport java.io.FileInputStream;\r\nimport java.io.IOException;\r\nimport java.io.ObjectInputStream;\r\nimport java.io.FileOutputStream;\r\nimport java.io.ObjectOutputStream;\r\nimport java.io.File;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\n/**\r\n * The Model class is responsible for managing the overall operations involving hotels, rooms, and reservations.\r\n */\r\n@SuppressWarnings(\"ALL\")\r\npublic class Model {\r\n    public Utility utility;\r\n    private ArrayList<Hotel> hotelList;\r\n    private int selectedHotelIndex;\r\n    private String savesDirPath = \"saves\" + File.separator;\r\n    private ArrayList<Manager> managerList;\r\n    private Map<String, Long> lastModifiedMap;\r\n    private Manager currentManager;\r\n\r\n    /**\r\n     * Constructs a Driver instance and initializes the necessary objects.\r\n     */\r\n    public Model() {\r\n        this.utility = new Utility();\r\n        this.hotelList = new ArrayList<Hotel>();\r\n        this.managerList = new ArrayList<Manager>();\r\n        this.lastModifiedMap = new HashMap<>();\r\n        this.currentManager = null;\r\n    }\r\n\r\n    public int addHotel(String name, int standardRoomCount, int deluxeRoomCount, int execRoomCount) {\r\n        int cont = 1;\r\n\r\n        //loop to check hotel name similarity\r\n        for (int i = 0; i < hotelList.size() && cont == 1; i++) {\r\n            if (name.equals(hotelList.get(i).getHotelName())) {\r\n                cont = 0;\r\n            }\r\n        }\r\n\r\n        int totalRoomCount = standardRoomCount + deluxeRoomCount + execRoomCount;\r\n        if (totalRoomCount <= 0) {\r\n            cont = -1;\r\n        }\r\n\r\n\r\n        if (standardRoomCount + deluxeRoomCount + execRoomCount > 50) {\r\n            cont = -2;\r\n        }\r\n\r\n        //valid case        \r\n        if (cont == 1) {\r\n            Hotel hotel = new Hotel(name);\r\n            hotelList.add(hotel);\r\n            for (int i = 0; i < standardRoomCount; i++) {\r\n                hotel.addStandardRoom();\r\n            }\r\n            for (int i = 0; i < deluxeRoomCount; i++) {\r\n                hotel.addDeluxeRoom();\r\n            }\r\n            for (int i = 0; i < execRoomCount; i++) {\r\n                hotel.addExecRoom();\r\n            }\r\n        }\r\n\r\n        return cont;\r\n    }\r\n\r\n    public String[] openHotel(int hotelIndex) {\r\n        //checker for invalid hotel indices\r\n        if (hotelIndex >= 0 && hotelIndex < hotelList.size()) {\r\n            this.selectedHotelIndex = hotelIndex;\r\n            return hotelList.get(hotelIndex).getHotelDetails();\r\n        } else {\r\n            return new String[] {\"\\0\"};\r\n        }\r\n    }\r\n\r\n    public boolean renameHotel(String newName) {\r\n        for (Hotel h : hotelList) {\r\n            if (h.getHotelName().equals(newName)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        hotelList.get(selectedHotelIndex).setHotelName(newName);\r\n        return true;\r\n    }\r\n\r\n    public void addRoom(int roomType, int hotelIndex) {\r\n        System.out.println(\"Room addition\");\r\n\r\n        switch (roomType) {\r\n            case 1:\r\n                hotelList.get(hotelIndex).addStandardRoom();\r\n                break;\r\n            case 2:\r\n                hotelList.get(hotelIndex).addDeluxeRoom();\r\n                break;\r\n            case 3:\r\n                hotelList.get(hotelIndex).addExecRoom();\r\n                break;\r\n            default:\r\n        }\r\n    }\r\n\r\n    public void setResTotalPrice(int promoValidity, int checkIn, int checkOut, int roomIndex) {\r\n        hotelList.get(selectedHotelIndex).getRoom(roomIndex).setResTotalPrice(promoValidity, checkIn, checkOut);\r\n    }\r\n\r\n    public String removeRoom(int index) {\r\n        if (index >= 0 && index < hotelList.get(selectedHotelIndex).getRoomCount())\r\n            return hotelList.get(selectedHotelIndex).removeRoom(index);\r\n        else return \"Input out of bounds\";\r\n    }\r\n\r\n    public String updatePrice(double price) {\r\n        if (price >= 150) {\r\n            return hotelList.get(selectedHotelIndex).updatePrice(price);\r\n        } else return \"New price must be equal to or greater than 150\";\r\n    }\r\n\r\n    public String updateDatePrice(int date, double multiplier) {\r\n        if (date >= 1 && date <= 30) {\r\n            if (multiplier >= 50 && multiplier <= 150) {\r\n                hotelList.get(selectedHotelIndex).updateDatePrice(date, multiplier);\r\n                return \"Date price modifier for Day \" + date + \" to \" + multiplier + \"% successful\";\r\n            } else return \"New % modifier must range 50% to 150%\";\r\n        } else return \"Please select valid dates to modify price (1-30)\";\r\n    }\r\n\r\n    public String removeReservation(int roomIndex, int resIndex) {\r\n        return hotelList.get(selectedHotelIndex).removeHotelReservation(roomIndex, resIndex);\r\n    }\r\n\r\n    public void removeHotel() {\r\n        hotelList.remove(hotelList.get(selectedHotelIndex));\r\n    }\r\n\r\n    public String addReservation(String name, int checkIn, int checkOut, int roomIndex, String[] breakdown){\r\n        return hotelList.get(selectedHotelIndex).addHotelReservation(name, checkIn, checkOut, roomIndex, breakdown);\r\n    }\r\n\r\n\r\n    public String[] getHotelListNames() {\r\n        String[] names = new String[hotelList.size()];\r\n\r\n        for (int i = 0; i < hotelList.size(); i++) {\r\n            names[i] = hotelList.get(i).getHotelName();\r\n        }\r\n\r\n        return names;\r\n    }\r\n\r\n    public String[] getRoomListNames() {\r\n        String[] names = new String[hotelList.get(selectedHotelIndex).getRoomList().size()];\r\n\r\n        for (int i = 0; i < hotelList.get(selectedHotelIndex).getRoomList().size(); i++) {\r\n            names[i] = hotelList.get(selectedHotelIndex).getRoomName(i);\r\n        }\r\n\r\n        return names;\r\n    }\r\n\r\n    public String[] getAvailableRoomNames(int checkIn, int checkOut) {\r\n        String[] names = new String[hotelList.get(selectedHotelIndex).getRoomList().size()];\r\n        int j = 0;\r\n        for (int i = 0; i < hotelList.get(selectedHotelIndex).getRoomList().size(); i++) {\r\n            if (hotelList.get(selectedHotelIndex).getRoomList().get(i).isAvailable(checkIn, checkOut)) {\r\n                names[j] = hotelList.get(selectedHotelIndex).getRoomName(i);\r\n                j++;\r\n            }\r\n        }\r\n\r\n        return names;\r\n    }\r\n\r\n    public int checkValidReservation(int roomIndex, int resIndex){\r\n        int i = 0;\r\n\r\n        if(getRoomCount()-1 < roomIndex || roomIndex < 0)\r\n            return 2;\r\n\r\n        if(hotelList.get(selectedHotelIndex).getRoom(roomIndex).getReservationList().size()-1 < resIndex || resIndex < 0)\r\n            return 1;\r\n\r\n       \r\n\r\n        return i;\r\n    }\r\n\r\n    public String[] getResBreakdown(int roomIndex, int resIndex){\r\n        return hotelList.get(selectedHotelIndex).getRoom(roomIndex).getResBreakdown(resIndex);\r\n    }\r\n\r\n    public String[] printReservationInfo(int roomIndex, int resIndex){\r\n        return hotelList.get(selectedHotelIndex).getRoom(roomIndex).getReservationList().get(resIndex).printReservation();\r\n    }\r\n\r\n    public int getTotalAvailableRooms(int date){\r\n        return hotelList.get(selectedHotelIndex).checkNumAvailableRooms(date);\r\n    }\r\n\r\n    public int getTotalReservedRooms(int date) {\r\n        return hotelList.get(selectedHotelIndex).checkNumBookedRooms(date);\r\n    }\r\n\r\n\r\n    public String[][] getReservationListDetailed() {\r\n        return hotelList.get(selectedHotelIndex).getReservationListDetailed();\r\n    }\r\n\r\n    public int getReservationCount() {\r\n        return hotelList.get(selectedHotelIndex).getReservationCount();\r\n    }\r\n\r\n    public String getCurrentHotel() {\r\n        return this.hotelList.get(selectedHotelIndex).getHotelName();\r\n    }\r\n\r\n    public int getCurrentHotelIndex() {\r\n        return selectedHotelIndex;\r\n    }\r\n\r\n    public String getRoomName(int index) {\r\n        return this.hotelList.get(selectedHotelIndex).getRoomName(index);\r\n    }\r\n\r\n    public int getRoomCount() {\r\n        return this.hotelList.get(selectedHotelIndex).getRoomCount();\r\n    }\r\n\r\n    public int getStandardRoomCount() {\r\n        return this.hotelList.get(selectedHotelIndex).getRoomTypeCount(\"Standard\");\r\n    }\r\n\r\n    public int getDeluxeRoomCount() {\r\n        return this.hotelList.get(selectedHotelIndex).getRoomTypeCount(\"Deluxe\");\r\n    }\r\n\r\n    public int getExecRoomCount() {\r\n        return this.hotelList.get(selectedHotelIndex).getRoomTypeCount(\"Executive\");\r\n    }\r\n\r\n    public double getBasePrice() {\r\n        return this.hotelList.get(selectedHotelIndex).getBasePrice();\r\n    }\r\n\r\n    public double getPricePerType(int index) {\r\n        return this.hotelList.get(selectedHotelIndex).getPricePerType(index);\r\n    }\r\n\r\n    public double[] getDatePrice() {\r\n        return this.hotelList.get(selectedHotelIndex).getAllDatePrice();\r\n    }\r\n\r\n    public String[] getAvailableDatesForRoom(int index) {\r\n        return this.hotelList.get(selectedHotelIndex).getAvailableDatesForRoom(index);\r\n    }\r\n\r\n    public double getEarnings() {\r\n        return this.hotelList.get(selectedHotelIndex).getHotelIncome();\r\n    }\r\n\r\n    public String[] getPriceBreakdown(int promoValidity, int checkIn, int checkOut, int roomIndex) {\r\n        return hotelList.get(selectedHotelIndex).getRoom(roomIndex).priceBreakdown(promoValidity, checkIn, checkOut);\r\n    }\r\n\r\n    public String[] getAvailableRoomList(int date) {\r\n        String[] roomList = new String[getTotalAvailableRooms(date)];\r\n        int j = 0;\r\n        for(int i=0; i<hotelList.get(selectedHotelIndex).getRoomList().size(); i++){\r\n            if(hotelList.get(selectedHotelIndex).getRoomList().get(i).isAvailable(date, date+1)){\r\n                roomList[j] = hotelList.get(selectedHotelIndex).getRoomList().get(i).getRoomName();\r\n                j++;\r\n            }\r\n        }\r\n        return roomList;\r\n    }\r\n\r\n\r\n    /**\r\n     * The method getAvailableRoom() iterates through a list of rooms to find an available room for a\r\n     * given check-in and check-out date range.\r\n     *\r\n     * @param checkIn  The checkIn parameter represents the check-in date for a room reservation.\r\n     * @param checkOut The checkOut parameter represents the\r\n     *                 check-out date for a room reservation.\r\n     * @param type     The type parameter represents the wanted type of room\r\n     * @return The method getAvailableRoom returns the index of the first available room in the\r\n     * roomList that is available for the specified check-in and check-out dates. If no available\r\n     * room is found, it returns -1.\r\n     */\r\n    public String getAvailableRoom(int checkIn, int checkOut, int type) {\r\n        for (int i = 0; i < hotelList.get(selectedHotelIndex).getRoomList().size(); i++) {\r\n            if (hotelList.get(selectedHotelIndex).getRoomList().get(i).isAvailable(checkIn, checkOut)) {\r\n                switch (type) {\r\n                    case 1://Standard\r\n                        if (hotelList.get(selectedHotelIndex).getRoomList().get(i) instanceof Standard)\r\n                            return (i + 1) + \"\";\r\n                        break;\r\n                    case 2://Deluxe\r\n                        if (hotelList.get(selectedHotelIndex).getRoomList().get(i) instanceof Deluxe)\r\n                            return (i + 1) + \"\";\r\n                        break;\r\n                    case 3://Executive\r\n                        if (hotelList.get(selectedHotelIndex).getRoomList().get(i) instanceof Executive)\r\n                            return (i + 1) + \"\";\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        return \"N/A\";\r\n    }\r\n\r\n    public String serializeHotelList(String name) {\r\n        String serName = name + \".ser\";\r\n        File file = new File(savesDirPath + serName);\r\n\r\n        if (file.exists()) {\r\n            long lastModified = file.lastModified();\r\n            Long recordedLastModified = lastModifiedMap.get(savesDirPath + serName);\r\n\r\n            if (recordedLastModified != null && lastModified != recordedLastModified) {\r\n                return \"File already exists. Choose a different name or delete the existing file\";\r\n            }\r\n        }\r\n\r\n        try (FileOutputStream fileOut = new FileOutputStream(file);\r\n             ObjectOutputStream out = new ObjectOutputStream(fileOut)) {\r\n            out.writeObject(hotelList);\r\n            System.out.println(\"Serialized data is saved in \" + serName);\r\n            lastModifiedMap.put(savesDirPath+serName, file.lastModified());\r\n            serializeLastModifiedMap();\r\n            return \"Save successful\";\r\n        } catch (IOException i) {\r\n            return \"Save unsuccessful\";\r\n        }\r\n    }\r\n\r\n    public String deserializeHotelList(String name) {\r\n        String serName = name + \".ser\";\r\n\r\n        try (FileInputStream fileIn = new FileInputStream(savesDirPath+ serName);\r\n             ObjectInputStream in = new ObjectInputStream(fileIn)) {\r\n            hotelList = (ArrayList<Hotel>) in.readObject();\r\n        } catch (IOException i) {\r\n            return \" List not found\";\r\n        } catch (ClassNotFoundException c) {\r\n            return \" List not found\";\r\n        }\r\n\r\n        return \" Successfully loaded hotels\";\r\n    }\r\n\r\n    public String saveManager(String userName, String password){\r\n        for(Manager m : managerList){\r\n            if (m.getUsername().equals(userName)) {\r\n                return \"Username already exists\";\r\n            }\r\n        }\r\n        managerList.add(new Manager(userName, password));\r\n\r\n        try (FileOutputStream fileOut = new FileOutputStream(savesDirPath + \"managers.ser\");\r\n        ObjectOutputStream out = new ObjectOutputStream(fileOut)) {\r\n            out.writeObject(managerList);\r\n            System.out.println(\"Serialized data is saved in \" + savesDirPath + \"managers.ser\");\r\n\r\n            return \"Manager added to list\";\r\n        } catch (IOException i) {\r\n            return \"Manager addition unsuccessful\";\r\n        }\r\n\r\n    }\r\n\r\n    public void deserializeManagerList(){\r\n        try (FileInputStream fileIn = new FileInputStream(savesDirPath+ \"managers.ser\");\r\n             ObjectInputStream in = new ObjectInputStream(fileIn)) {\r\n            managerList = (ArrayList<Manager>) in.readObject();\r\n            System.out.println(\"Successfully loaded managers\");\r\n        } catch (IOException i) {\r\n            System.out.println(\"Manager list not found. e1\");\r\n        } catch (ClassNotFoundException c) {\r\n            System.out.println(\"Manager list not found. e2\");\r\n        }\r\n\r\n    }\r\n\r\n    public boolean loadManager(String userName, String password){\r\n        for(Manager m : managerList){\r\n            if (m.getUsername().equals(userName)) {\r\n                if (m.getPassword().equals(password)){\r\n                    this.currentManager = m;\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public String deleteManager(){\r\n        managerList.remove(currentManager);\r\n        try (FileOutputStream fileOut = new FileOutputStream(savesDirPath + \"managers.ser\");\r\n             ObjectOutputStream out = new ObjectOutputStream(fileOut)) {\r\n            out.writeObject(managerList);\r\n            System.out.println(\"Serialized data is saved in \" + savesDirPath + \"managers.ser\");\r\n            return \"Manager deleted\";\r\n        } catch(IOException i) {\r\n            return \"Manager deletion unsuccessful\";\r\n        }\r\n    }\r\n\r\n    public String deleteHotelList(String listName){\r\n        String serName = listName + \".ser\";\r\n        File file = new File(savesDirPath + serName);\r\n\r\n        if (file.exists()){\r\n            file.delete();\r\n            lastModifiedMap.remove(savesDirPath + serName);\r\n            serializeLastModifiedMap();\r\n            return \"List deleted\";\r\n        } else {\r\n            return \"List not found\";\r\n        }\r\n    }\r\n\r\n    public void serializeLastModifiedMap() {\r\n        try (FileOutputStream fileOut = new FileOutputStream(savesDirPath + \"lastModifiedMap.ser\");\r\n             ObjectOutputStream out = new ObjectOutputStream(fileOut)) {\r\n            out.writeObject(lastModifiedMap);\r\n            System.out.println(\"Serialized lastModifiedMap to \" + savesDirPath + \"lastModifiedMap.ser\");\r\n        } catch (IOException i) {\r\n            System.out.println(\"LastModifiedMap serialization unsuccessful. e1\");\r\n        }\r\n    }\r\n\r\n    public void deserializeLastModifiedMap() {\r\n        try (FileInputStream fileIn = new FileInputStream(savesDirPath + \"lastModifiedMap.ser\");\r\n             ObjectInputStream in = new ObjectInputStream(fileIn)) {\r\n            lastModifiedMap = (Map<String, Long>) in.readObject();\r\n            System.out.println(\"Deserialized lastModifiedMap from \" + savesDirPath + \"lastModifiedMap.ser\");\r\n        } catch (IOException i) {\r\n            System.out.println(\"LastModifiedMap not found. e1\");\r\n        } catch (ClassNotFoundException c) {\r\n            System.out.println(\"LastModifiedMap not found. e2\");\r\n        }\r\n    }\r\n\r\n    public void resetHotelList(){\r\n        this.hotelList = new ArrayList<Hotel>();\r\n    }\r\n\r\n    public boolean getManagerPresence(){\r\n         if (currentManager != null){\r\n             return true;\r\n         } else return false;\r\n    }\r\n\r\n    public void logoutManager(){this.currentManager = null;\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/mvcpack/Model.java b/mvcpack/Model.java
--- a/mvcpack/Model.java	(revision f8a1adc008d05537f56a653397a2d0d2537147f7)
+++ b/mvcpack/Model.java	(date 1722343563348)
@@ -36,6 +36,17 @@
         this.currentManager = null;
     }
 
+
+    /**
+     * The addHotel() method adds a new hotel to the Model with the specified name and room counts.
+     *
+     * @param name The name of the hotel to be added.
+     * @param standardRoomCount The number of standard rooms to be added to the hotel.
+     * @param deluxeRoomCount The number of deluxe rooms to be added to the hotel.
+     * @param execRoomCount The number of executive rooms to be added to the hotel.
+     * @return An integer value indicating the status of the addition operation. Returns 1 if the hotel was added successfully,
+     * -1 if the total room count is 0 or less, and -2 if the total room count exceeds 50.
+     */
     public int addHotel(String name, int standardRoomCount, int deluxeRoomCount, int execRoomCount) {
         int cont = 1;
 
@@ -47,11 +58,12 @@
         }
 
         int totalRoomCount = standardRoomCount + deluxeRoomCount + execRoomCount;
+        //room number input is less than 0
         if (totalRoomCount <= 0) {
             cont = -1;
         }
 
-
+         //total room number is greater than 50
         if (standardRoomCount + deluxeRoomCount + execRoomCount > 50) {
             cont = -2;
         }
@@ -74,6 +86,14 @@
         return cont;
     }
 
+
+
+    /**
+     * Opens a hotel based on the given hotel index.
+     *
+     * @param hotelIndex the index of the hotel to open
+     * @return an array of strings representing the details of the opened hotel
+     */
     public String[] openHotel(int hotelIndex) {
         //checker for invalid hotel indices
         if (hotelIndex >= 0 && hotelIndex < hotelList.size()) {
@@ -84,6 +104,12 @@
         }
     }
 
+    /**
+     * Renames the hotel at the specified index.
+     *
+     * @param newName the new name of the hotel
+     * @return true if the name was successfully changed, false if the new name is already in use
+     */
     public boolean renameHotel(String newName) {
         for (Hotel h : hotelList) {
             if (h.getHotelName().equals(newName)) {
@@ -95,39 +121,72 @@
         return true;
     }
 
+    /**
+     * Adds a new room to the hotel at the specified index.
+     *
+     * @param roomType the type of room to add (1 for standard, 2 for deluxe, 3 for executive)
+     * @param hotelIndex the index of the hotel to add the room to
+     */
     public void addRoom(int roomType, int hotelIndex) {
         System.out.println("Room addition");
 
         switch (roomType) {
-            case 1:
+            case 1://standard
                 hotelList.get(hotelIndex).addStandardRoom();
                 break;
-            case 2:
+            case 2://deluxe
                 hotelList.get(hotelIndex).addDeluxeRoom();
                 break;
-            case 3:
+            case 3://executive
                 hotelList.get(hotelIndex).addExecRoom();
                 break;
             default:
         }
     }
 
+    /**
+     * Sets the total price of the reservation for the specified room.
+     *
+     * @param promoValidity the validity of the promotion (0 for no promotion, 1 for valid promotion)
+     * @param checkIn the check-in date of the reservation
+     * @param checkOut the check-out date of the reservation
+     * @param roomIndex the index of the room to set the price for
+     */
     public void setResTotalPrice(int promoValidity, int checkIn, int checkOut, int roomIndex) {
         hotelList.get(selectedHotelIndex).getRoom(roomIndex).setResTotalPrice(promoValidity, checkIn, checkOut);
     }
 
+    /**
+     * Removes a room from the hotel at the specified index.
+     *
+     * @param index the index of the room to remove
+     * @return a string indicating the result of the removal operation
+     */
     public String removeRoom(int index) {
         if (index >= 0 && index < hotelList.get(selectedHotelIndex).getRoomCount())
             return hotelList.get(selectedHotelIndex).removeRoom(index);
         else return "Input out of bounds";
     }
 
+    /**
+     * Updates the price of the hotel at the specified index.
+     *
+     * @param price the new price of the hotel
+     * @return a string indicating the result of the update operation
+     */
     public String updatePrice(double price) {
         if (price >= 150) {
             return hotelList.get(selectedHotelIndex).updatePrice(price);
         } else return "New price must be equal to or greater than 150";
     }
 
+    /**
+     * Updates the price of a specific date for the hotel at the specified index.
+     *
+     * @param date the date to update the price for
+     * @param multiplier the multiplier to apply to the base price
+     * @return a string indicating the result of the update operation
+     */
     public String updateDatePrice(int date, double multiplier) {
         if (date >= 1 && date <= 30) {
             if (multiplier >= 50 && multiplier <= 150) {
@@ -137,14 +196,34 @@
         } else return "Please select valid dates to modify price (1-30)";
     }
 
+    /**
+     * Removes a reservation from the specified room.
+     *
+     * @param roomIndex the index of the room to remove the reservation from
+     * @param resIndex the index of the reservation to remove
+     * @return a string indicating the result of the removal operation
+     */
     public String removeReservation(int roomIndex, int resIndex) {
         return hotelList.get(selectedHotelIndex).removeHotelReservation(roomIndex, resIndex);
     }
 
+    /**
+     * Removes the hotel at the specified index.
+     */
     public void removeHotel() {
         hotelList.remove(hotelList.get(selectedHotelIndex));
     }
 
+    /**
+     * Adds a reservation to the hotel at the specified index.
+     *
+     * @param name the name of the guest
+     * @param checkIn the check-in date of the reservation
+     * @param checkOut the check-out date of the reservation
+     * @param roomIndex the index of the room to reserve
+     * @param breakdown the breakdown of the reservation
+     * @return a string indicating the result of the addition operation
+     */
     public String addReservation(String name, int checkIn, int checkOut, int roomIndex, String[] breakdown){
         return hotelList.get(selectedHotelIndex).addHotelReservation(name, checkIn, checkOut, roomIndex, breakdown);
     }
@@ -160,6 +239,11 @@
         return names;
     }
 
+    /**
+     * Retrieves an array of room names for the currently selected hotel.
+     *
+     * @return an array of room names
+     */
     public String[] getRoomListNames() {
         String[] names = new String[hotelList.get(selectedHotelIndex).getRoomList().size()];
 
@@ -170,19 +254,16 @@
         return names;
     }
 
-    public String[] getAvailableRoomNames(int checkIn, int checkOut) {
-        String[] names = new String[hotelList.get(selectedHotelIndex).getRoomList().size()];
-        int j = 0;
-        for (int i = 0; i < hotelList.get(selectedHotelIndex).getRoomList().size(); i++) {
-            if (hotelList.get(selectedHotelIndex).getRoomList().get(i).isAvailable(checkIn, checkOut)) {
-                names[j] = hotelList.get(selectedHotelIndex).getRoomName(i);
-                j++;
-            }
-        }
-
-        return names;
-    }
-
+    /**
+     * Checks if a reservation is valid for a given room and reservation index.
+     *
+     * @param  roomIndex  the index of the room to check
+     * @param  resIndex   the index of the reservation to check
+     * @return             an integer indicating the validity of the reservation:
+     *                     - 0 if the reservation is valid
+     *                     - 1 if the reservation index is out of range
+     *                     - 2 if the room index is out of range
+     */
     public int checkValidReservation(int roomIndex, int resIndex){
         int i = 0;
 
@@ -192,8 +273,6 @@
         if(hotelList.get(selectedHotelIndex).getRoom(roomIndex).getReservationList().size()-1 < resIndex || resIndex < 0)
             return 1;
 
-       
-
         return i;
     }
 
@@ -274,6 +353,12 @@
         return hotelList.get(selectedHotelIndex).getRoom(roomIndex).priceBreakdown(promoValidity, checkIn, checkOut);
     }
 
+    /**
+     * Retrieves a list of available room names for a given date.
+     *
+     * @param  date  the date for which to check room availability
+     * @return       an array of room names that are available on the given date
+     */
     public String[] getAvailableRoomList(int date) {
         String[] roomList = new String[getTotalAvailableRooms(date)];
         int j = 0;
@@ -323,6 +408,12 @@
         return "N/A";
     }
 
+    /**
+     * Serializes the hotel list into a file with the given name.
+     *
+     * @param name the name of the file to save the serialized data
+     * @return a string indicating the success or failure of the serialization process
+     */
     public String serializeHotelList(String name) {
         String serName = name + ".ser";
         File file = new File(savesDirPath + serName);
@@ -348,6 +439,16 @@
         }
     }
 
+    /**
+     * Deserializes a hotel list from a file with the given name.
+     *
+     * @param  name  the name of the file to load the serialized data from
+     * @return       a string indicating the success or failure of the deserialization process,
+     *               with the following possible values:
+     *               - "List not found. e1" if the file is not found or cannot be read
+     *               - "List not found. e2" if the class of the serialized object cannot be found
+     *               - "Successfully loaded hotels" if the deserialization is successful
+     */
     public String deserializeHotelList(String name) {
         String serName = name + ".ser";
 
@@ -363,6 +464,17 @@
         return " Successfully loaded hotels";
     }
 
+    /**
+     * Saves a new manager to the manager list and serializes the list to a file.
+     *
+     * @param  userName  the username of the new manager
+     * @param  password  the password of the new manager
+     * @return           a string indicating the success or failure of the save operation,
+     *                   with the following possible values:
+     *                   - "Username already exists" if the username already exists in the manager list
+     *                   - "Manager added to list" if the manager is successfully added to the list and serialized
+     *                   - "Manager addition unsuccessful" if there is an error during the save operation
+     */
     public String saveManager(String userName, String password){
         for(Manager m : managerList){
             if (m.getUsername().equals(userName)) {
@@ -383,6 +495,20 @@
 
     }
 
+    /**
+     * Deserializes the manager list from a file and loads it into memory.
+     *
+     * This method attempts to deserialize the manager list from a file located at
+     * `savesDirPath + "managers.ser"`. If the file is not found or there is an
+     * error during the deserialization process, appropriate error messages are
+     * printed to the console.
+     *
+     * After successfully deserializing the manager list, it is loaded into memory
+     * and printed to the console for debugging purposes.
+     *
+     * @throws IOException if there is an error reading from the file
+     * @throws ClassNotFoundException if the class of a serialized object cannot be found
+     */
     public void deserializeManagerList(){
         try (FileInputStream fileIn = new FileInputStream(savesDirPath+ "managers.ser");
              ObjectInputStream in = new ObjectInputStream(fileIn)) {
@@ -466,7 +592,8 @@
          } else return false;
     }
 
-    public void logoutManager(){this.currentManager = null;
+    public void logoutManager(){
+        this.currentManager = null;
     }
 }
 
Index: mvcpack/View.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package mvcpack;\r\n\r\nimport mvcpack.custompack.*;\r\n\r\nimport javax.imageio.ImageIO;\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.event.*;\r\nimport java.awt.image.BufferedImage;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.text.DecimalFormat;\r\n\r\npublic class View extends JFrame {\r\n    private CLabel createLbl;\r\n    private CLabel openLbl;\r\n    private JLabel feedbackLbl;\r\n    private JLabel centerTitleLbl;\r\n    private JTextField hotelNameTf, numStandardTf, numDeluxeTf, numExecutiveTf,\r\n                        numCheckInTf, numCheckOutTf, generalTf, promoCodeTf, nameTf, infoDateTf;\r\n    private CButton loginBtn, createManagerBtn, guestBtn, logoutBtn, createBtn, openBtn, confirmBtn, selectBtn;\r\n    private JPanel southPnl, westPnl, centerPnl, resLeftPnl, resRightPnl, infoRightPnl;\r\n\r\n    //open hotel\r\n    private CButton inquireBtn, manageBtn, reserveBtn;\r\n\r\n    //inquire\r\n    private CButton iHotelBtn, iRoomBtn, iResBtn, iDateBtn, backBtn,\r\n        selectRoomBtn;\r\n\r\n    //manage\r\n    private CButton renameBtn, addRoomBtn, removeRoomBtn, updatePriceBtn,\r\n        removeReservationBtn, removeHotelBtn, datePriceBtn,\r\n            confirmRenameBtn, confirmAddRmBtn, confirmRemoveRmBtn, confirmUpdatePriceBtn\r\n            ,confirmRemoveResBtn, confirmRemoveHotelBtn, confirmDatePriceBtn;\r\n    private JTextField newNameTf, general2Tf, createManagerTf;\r\n    private JPasswordField loginPwTf, createManagerPwTf;\r\n\r\n    private CButton confirmResBtn, finalizeResButton, cancelResButton, standardRoomBtn, deluxeRoomBtn, executiveRoomBtn;\r\n    private CButton saveBtn, loadBtn, confirmSaveBtn, confirmLoadBtn, deleteManagerBtn, deleteHotelList\r\n            , confirmDeleteManagerBtn, confirmDeleteHotelListBtn;\r\n\r\n    //date inquiry\r\n    private CButton[] dateButtons = new CButton[30];\r\n    private CButton dateBackBtn;\r\n\r\n    //res inquiry\r\n    private CButton inquireResBtn;\r\n\r\n    //login\r\n    private CButton registerBtn, cancelRegisterBtn;\r\n    \r\n    private final int SMALL_TF_WIDTH = 50;\r\n    private final int TF_WIDTH = 200;\r\n    private final int BTN_WIDTH = 200;\r\n    private final int BTN_HEIGHT = 60;\r\n    private final int SMALL_BTN_HEIGHT = BTN_HEIGHT - 15;\r\n    private final int SMALL_BTN_WIDTH = BTN_WIDTH - 30;\r\n    private final int SMALLEST_BTN_WIDTH = (BTN_WIDTH-10) / 3;\r\n    private final int TF_HEIGHT = 35;\r\n\r\n    private final int MAINFRAME_WIDTH = 700;\r\n    private final int MAINFRAME_HEIGHT = 600;\r\n    private final int CENTER_MAIN_WIDTH = MAINFRAME_WIDTH-(BTN_WIDTH+10 + SMALL_BTN_WIDTH+20)-10;\r\n    private final int CENTER_MAIN_HEIGHT = 505;\r\n    private final String DEFAULT_FONT = \"Verdana\";\r\n    private final int SUBTITLE_HEIGHT = 15;\r\n\r\n\r\n    public View() {\r\n        super(\"Hotel Reservation System\");\r\n        setLayout(new BorderLayout());\r\n        setSize( MAINFRAME_WIDTH,MAINFRAME_HEIGHT);\r\n        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n\r\n\r\n        setVisible(true);\r\n        setResizable(false);\r\n\r\n        init();\r\n        loginPage();\r\n    }\r\n\r\n    //initial values when opening\r\n    private void init() {\r\n\r\n        //BUTTONS\r\n        this.loginBtn = new CButton(\"Log-in\", BTN_WIDTH, SMALL_BTN_HEIGHT, 12);\r\n        this.createManagerBtn = new CButton(\"New Manager\", BTN_WIDTH, SMALL_BTN_HEIGHT, 12);\r\n        this.guestBtn = new CButton(\"<html><u>Guest Mode</u></html>\", SMALL_BTN_WIDTH, SMALL_BTN_HEIGHT, 12, Color.decode(\"#B6C4B6\"), Color.decode(\"#163020\"));\r\n        this.deleteManagerBtn = new CButton(\"Delete Manager\", SMALL_BTN_WIDTH, SMALL_BTN_HEIGHT, 12);\r\n        this.deleteHotelList = new CButton(\"Delete Hotel List\", SMALL_BTN_WIDTH, SMALL_BTN_HEIGHT, 12);\r\n        this.confirmDeleteManagerBtn = new CButton(\"Confirm Deletion\", BTN_WIDTH, SMALL_BTN_HEIGHT, 12);\r\n        this.confirmDeleteHotelListBtn = new CButton(\"Confirm Deletion\", BTN_WIDTH, SMALL_BTN_HEIGHT, 12);\r\n        this.createBtn = new CButton(\"Create a Hotel\", BTN_WIDTH, BTN_HEIGHT);\r\n        this.openBtn = new CButton(\"Open a Hotel\", BTN_WIDTH, BTN_HEIGHT);\r\n        this.logoutBtn = new CButton(\"Log out\", BTN_WIDTH, BTN_HEIGHT);\r\n        loadBtn = new CButton(\"Load Hotels\", BTN_WIDTH, BTN_HEIGHT);\r\n        this.confirmBtn = new CButton(\"Confirm\", BTN_WIDTH, BTN_HEIGHT);\r\n        this.selectBtn = new CButton(\"Select\", BTN_WIDTH, BTN_HEIGHT);\r\n        inquireBtn = new CButton(\"Inquire\", BTN_WIDTH, BTN_HEIGHT);\r\n        manageBtn = new CButton(\"Manage\", BTN_WIDTH, BTN_HEIGHT);\r\n        reserveBtn = new CButton(\"Reserve\", BTN_WIDTH, BTN_HEIGHT);\r\n        backBtn = new CButton(\"Back\", BTN_WIDTH, BTN_HEIGHT);\r\n        saveBtn = new CButton(\"Save Hotels\", BTN_WIDTH, BTN_HEIGHT);\r\n        confirmLoadBtn = new CButton(\"Load Hotels\", BTN_WIDTH, BTN_HEIGHT);\r\n        confirmSaveBtn = new CButton(\"Save Hotels\", BTN_WIDTH, BTN_HEIGHT);\r\n\r\n        //inquire panel\r\n        iDateBtn = new CButton(\"Dates\", SMALL_BTN_WIDTH, SMALL_BTN_HEIGHT, 14);\r\n        iHotelBtn = new CButton(\"Hotel\", SMALL_BTN_WIDTH, SMALL_BTN_HEIGHT, 14);\r\n        iResBtn = new CButton(\"Reservation\", SMALL_BTN_WIDTH, SMALL_BTN_HEIGHT, 14);\r\n        iRoomBtn = new CButton(\"Room\", SMALL_BTN_WIDTH, SMALL_BTN_HEIGHT, 14);\r\n        selectRoomBtn = new CButton(\"Select Room\", BTN_WIDTH, SMALL_BTN_HEIGHT, 14);\r\n\r\n        //manage pnl\r\n        renameBtn = new CButton(\"Rename Hotel\", SMALL_BTN_WIDTH, SMALL_BTN_HEIGHT, 14);\r\n        addRoomBtn = new CButton(\"Add Room\", SMALL_BTN_WIDTH, SMALL_BTN_HEIGHT, 14);\r\n        removeRoomBtn = new CButton(\"Remove Room\", SMALL_BTN_WIDTH, SMALL_BTN_HEIGHT, 14);\r\n        updatePriceBtn = new CButton(\"Update Price\", SMALL_BTN_WIDTH, SMALL_BTN_HEIGHT, 14);\r\n        datePriceBtn = new CButton(\"Price/Date\", SMALL_BTN_WIDTH, SMALL_BTN_HEIGHT, 14);\r\n        removeReservationBtn = new CButton(\"Remove Booking\", SMALL_BTN_WIDTH, SMALL_BTN_HEIGHT, 14);\r\n        removeHotelBtn = new CButton(\"Remove Hotel\", SMALL_BTN_WIDTH, SMALL_BTN_HEIGHT, 14);\r\n\r\n        confirmRenameBtn = new CButton(\"Confirm Rename\", BTN_WIDTH, SMALL_BTN_HEIGHT, 14);\r\n        confirmAddRmBtn = new CButton(\"Confirm Add Rooms\", BTN_WIDTH, SMALL_BTN_HEIGHT, 14);\r\n        confirmRemoveRmBtn = new CButton(\"Confirm Removal\", BTN_WIDTH, SMALL_BTN_HEIGHT, 14);\r\n        confirmUpdatePriceBtn = new CButton(\"Confirm Update\", BTN_WIDTH, SMALL_BTN_HEIGHT, 14);\r\n        confirmDatePriceBtn = new CButton(\"Confirm Update\", BTN_WIDTH, SMALL_BTN_HEIGHT, 14);\r\n        confirmRemoveResBtn = new CButton(\"Confirm Removal\", BTN_WIDTH, SMALL_BTN_HEIGHT, 14);\r\n        confirmRemoveHotelBtn = new CButton(\"Confirm Removal\", BTN_WIDTH, SMALL_BTN_HEIGHT, 14);\r\n\r\n        //res pnl\r\n        confirmResBtn = new CButton(\"Add Reservation\", BTN_WIDTH, BTN_HEIGHT, 14);\r\n        finalizeResButton = new CButton(\"Confirm\", SMALL_BTN_WIDTH, SMALL_BTN_HEIGHT, 14);\r\n        cancelResButton = new CButton(\"Cancel\", SMALL_BTN_WIDTH, SMALL_BTN_HEIGHT, 14);\r\n        standardRoomBtn = new CButton(\"Std\", SMALLEST_BTN_WIDTH, SMALL_BTN_HEIGHT, 10);\r\n        deluxeRoomBtn = new CButton(\"Dlx\", SMALLEST_BTN_WIDTH, SMALL_BTN_HEIGHT, 10);\r\n        executiveRoomBtn = new CButton(\"Exe\", SMALLEST_BTN_WIDTH, SMALL_BTN_HEIGHT, 10);\r\n\r\n        //date info\r\n        for(int i = 0; i<30; i++){\r\n            dateButtons[i] = new CButton((i+1)+\"\", SMALLEST_BTN_WIDTH-25, SMALL_BTN_HEIGHT-5, 10);\r\n            dateButtons[i].setMargin(new Insets(1,1,1,1));\r\n        }\r\n        dateBackBtn = new CButton(\"Back\", SMALL_BTN_WIDTH, SMALL_BTN_HEIGHT, 14);\r\n        inquireResBtn = new CButton(\"Inquire\", BTN_WIDTH, SMALL_BTN_HEIGHT, 14);\r\n        registerBtn = new CButton(\"Register\", SMALL_BTN_WIDTH, SMALL_BTN_HEIGHT, 12);\r\n        cancelRegisterBtn = new CButton(\"Cancel\", SMALL_BTN_WIDTH, SMALL_BTN_HEIGHT, 12);\r\n\r\n        this.centerTitleLbl = new JLabel();\r\n        this.centerTitleLbl.setPreferredSize(new Dimension(MAINFRAME_WIDTH, TF_HEIGHT));\r\n        this.centerTitleLbl.setFont(new Font(DEFAULT_FONT, Font.BOLD, 20));\r\n        this.centerTitleLbl.setForeground(Color.decode(\"#163020\"));\r\n        this.centerTitleLbl.setBackground(Color.decode(\"#B6C4B6\"));\r\n        this.centerTitleLbl.setOpaque(true);\r\n        this.centerTitleLbl.setHorizontalAlignment(SwingConstants.CENTER);\r\n        this.centerTitleLbl.setVerticalAlignment(SwingConstants.CENTER);\r\n\r\n        //SOUTH PANEL\r\n        this.feedbackLbl = new JLabel();\r\n        this.feedbackLbl.setPreferredSize(new Dimension(MAINFRAME_WIDTH, TF_HEIGHT-5));\r\n        this.feedbackLbl.setFont(new Font(DEFAULT_FONT, Font.BOLD, 15));\r\n        this.feedbackLbl.setHorizontalAlignment(SwingConstants.CENTER);\r\n        this.feedbackLbl.setVerticalAlignment(SwingConstants.NORTH);\r\n        this.feedbackLbl.setForeground(Color.decode(\"#163020\"));\r\n        feedbackLbl.setBackground(Color.decode(\"#B6C4B6\"));\r\n        feedbackLbl.setOpaque(true);\r\n\r\n        southPnl = new JPanel();\r\n        southPnl.setLayout(new FlowLayout());\r\n        southPnl.setPreferredSize(new Dimension(MAINFRAME_WIDTH,TF_HEIGHT-5));\r\n        southPnl.setBackground(Color.decode(\"#B6C4B6\"));\r\n        southPnl.add(feedbackLbl);\r\n\r\n        centerPnl = new JPanel();\r\n        centerPnl.setBackground(Color.decode(\"#304D30\"));\r\n        centerPnl.setPreferredSize(new Dimension(0,0));\r\n\r\n        westPnl = new JPanel();\r\n        westPnl.setLayout(new FlowLayout());\r\n        westPnl.setPreferredSize(new Dimension(0,0));\r\n\r\n        this.add(centerPnl,BorderLayout.CENTER);\r\n        this.add(westPnl, BorderLayout.WEST);\r\n        this.add(southPnl, BorderLayout.SOUTH);\r\n        this.revalidate();\r\n        this.repaint();\r\n    }\r\n\r\n    public void registerPage(){\r\n        this.remove(centerPnl);\r\n        this.remove(westPnl);\r\n\r\n        centerPnl = new JPanel(new BorderLayout());\r\n        centerPnl.setPreferredSize(new Dimension(MAINFRAME_WIDTH,MAINFRAME_HEIGHT-100));\r\n\r\n        JPanel newPnl = new JPanel(new FlowLayout(FlowLayout.CENTER));\r\n        newPnl.setPreferredSize(new Dimension(MAINFRAME_WIDTH/2, MAINFRAME_HEIGHT));\r\n        newPnl.setBackground(Color.decode(\"#304D30\"));\r\n        createManagerTf = new JTextField();\r\n        createManagerPwTf = new JPasswordField();\r\n        createManagerTf.setPreferredSize(new Dimension(TF_WIDTH,TF_HEIGHT));\r\n        createManagerPwTf.setPreferredSize(new Dimension(TF_WIDTH,TF_HEIGHT));\r\n\r\n        newPnl.add(new CLabel(\"                                                                \", SUBTITLE_HEIGHT, Font.BOLD));\r\n        newPnl.add(new CLabel(\"New Manager Registration\", 20, Font.BOLD));\r\n        newPnl.add(new CLabel(\"Username: \", SUBTITLE_HEIGHT-2, Font.BOLD));\r\n        newPnl.add(createManagerTf);\r\n        newPnl.add(new CLabel(\"Password: \", SUBTITLE_HEIGHT-2, Font.BOLD));\r\n        newPnl.add(createManagerPwTf);\r\n        newPnl.add(new CLabel(\"                                                                \", SUBTITLE_HEIGHT, Font.BOLD));\r\n        newPnl.add(createManagerBtn);\r\n        newPnl.add(cancelRegisterBtn);\r\n\r\n        JPanel logoPnl = new JPanel();\r\n        logoPnl.setPreferredSize(new Dimension(MAINFRAME_WIDTH / 2 + 2, MAINFRAME_HEIGHT - 100));\r\n        logoPnl.setBackground(Color.decode(\"#EEF0E5\"));\r\n\r\n        BufferedImage logo = null;\r\n        File logoFile = new File(\"HRSLogo.png\");\r\n        try {\r\n            logo = ImageIO.read(logoFile);\r\n            JLabel picLabel = new JLabel(new ImageIcon(logo));\r\n            picLabel.setMaximumSize(new Dimension(MAINFRAME_WIDTH / 2, MAINFRAME_HEIGHT - 100));\r\n            logoPnl.add(picLabel);\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        centerPnl.setBackground(Color.decode(\"#EEF0E5\"));\r\n        centerPnl.add(logoPnl, BorderLayout.WEST);\r\n        centerPnl.add(newPnl, BorderLayout.EAST);\r\n\r\n        westPnl = new JPanel();\r\n        westPnl.setPreferredSize(new Dimension(0,0));\r\n\r\n        this.add(centerPnl, BorderLayout.CENTER);\r\n        this.add(westPnl, BorderLayout.WEST);\r\n        this.revalidate();\r\n        this.repaint();\r\n    }\r\n\r\n    public void loginPage() {\r\n\r\n        this.remove(centerPnl);\r\n        this.remove(westPnl);\r\n\r\n        generalTf = new JTextField();\r\n        generalTf.setPreferredSize(new Dimension(TF_WIDTH, TF_HEIGHT));\r\n        loginPwTf = new JPasswordField();\r\n        loginPwTf.setPreferredSize(new Dimension(TF_WIDTH, TF_HEIGHT));\r\n        hotelNameTf = new JTextField();\r\n        hotelNameTf.setPreferredSize(new Dimension(TF_WIDTH, TF_HEIGHT));\r\n\r\n        centerPnl = new JPanel(new BorderLayout());\r\n        JPanel loginPnl = new JPanel(new FlowLayout(FlowLayout.CENTER));\r\n        centerPnl.setPreferredSize(new Dimension(MAINFRAME_WIDTH, MAINFRAME_HEIGHT - 100));\r\n        loginPnl.setPreferredSize(new Dimension(MAINFRAME_WIDTH / 2, MAINFRAME_HEIGHT - 100));\r\n        loginPnl.setBackground(Color.decode(\"#304D30\"));\r\n\r\n        loginPnl.add(new CLabel(\"                                                                \", SUBTITLE_HEIGHT, Font.BOLD));\r\n        loginPnl.add(new CLabel(\"              Manager Log-In              \", 25, Font.BOLD));\r\n        loginPnl.add(new CLabel(\"Username: \", SUBTITLE_HEIGHT - 2, Font.BOLD));\r\n        loginPnl.add(generalTf);\r\n        loginPnl.add(new CLabel(\"Password: \", SUBTITLE_HEIGHT - 2, Font.BOLD));\r\n        loginPnl.add(loginPwTf);\r\n        loginPnl.add(new CLabel(\"                                                                \", SUBTITLE_HEIGHT, Font.BOLD));\r\n        loginPnl.add(new CLabel(\"List of Hotels to Load\", SUBTITLE_HEIGHT, Font.BOLD));\r\n        loginPnl.add(new CLabel(\"(optional)\", SUBTITLE_HEIGHT - 2, Font.ITALIC));\r\n        loginPnl.add(hotelNameTf);\r\n        loginPnl.add(loginBtn);\r\n        loginPnl.add(new CLabel(\"                                    \", SUBTITLE_HEIGHT, Font.BOLD));\r\n        loginPnl.add(new CLabel(\"  No account yet? Register now!  \", SUBTITLE_HEIGHT, Font.BOLD));\r\n        loginPnl.add(registerBtn);\r\n\r\n        JPanel logoPnl = new JPanel();\r\n        logoPnl.setPreferredSize(new Dimension(MAINFRAME_WIDTH / 2 + 2, MAINFRAME_HEIGHT - 100));\r\n        logoPnl.setBackground(Color.decode(\"#EEF0E5\"));\r\n\r\n        BufferedImage logo = null;\r\n        File logoFile = new File(\"HRSLogo.png\");\r\n        try {\r\n            logo = ImageIO.read(logoFile);\r\n            JLabel picLabel = new JLabel(new ImageIcon(logo));\r\n            picLabel.setMaximumSize(new Dimension(MAINFRAME_WIDTH / 2, 175));\r\n            logoPnl.add(picLabel);\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        JPanel guestPnl = new JPanel(new FlowLayout(FlowLayout.CENTER));\r\n        guestPnl.setPreferredSize(new Dimension(MAINFRAME_WIDTH, 50));\r\n        guestPnl.setBackground(Color.decode(\"#B6C4B6\"));\r\n\r\n        CLabel guestLbl = new CLabel(\"Experience the system even without being a manager!\", SUBTITLE_HEIGHT - 2, Font.BOLD);\r\n        guestLbl.setForeground(Color.decode(\"#163020\"));\r\n        guestPnl.add(guestLbl);\r\n        guestPnl.add(guestBtn);\r\n\r\n        centerPnl.add(logoPnl, BorderLayout.WEST);\r\n        centerPnl.add(loginPnl, BorderLayout.EAST);\r\n        centerPnl.add(guestPnl, BorderLayout.SOUTH);\r\n\r\n        westPnl = new JPanel();\r\n        westPnl.setPreferredSize(new Dimension(0, 0));\r\n\r\n        this.add(centerPnl, BorderLayout.CENTER);\r\n        this.add(westPnl, BorderLayout.WEST);\r\n\r\n        this.revalidate();\r\n        this.repaint();\r\n    }\r\n\r\n    public void home(boolean managerPresence){\r\n        this.remove(this.centerPnl);\r\n        this.remove(westPnl);\r\n\r\n        centerPnl = new JPanel();\r\n        centerPnl.setBackground(Color.decode(\"#304D30\"));\r\n        westPnl = new JPanel();\r\n        westPnl.setLayout(new FlowLayout());\r\n        westPnl.setPreferredSize(new Dimension(BTN_WIDTH+10, CENTER_MAIN_HEIGHT));\r\n        westPnl.setBackground(Color.decode(\"#EEF0E5\"));\r\n        westPnl.add(createBtn);\r\n        westPnl.add(openBtn);\r\n\r\n        if(managerPresence) {\r\n            this.westPnl.add(saveBtn);\r\n            this.westPnl.add(loadBtn);\r\n        }\r\n        westPnl.add(logoutBtn);\r\n        westPnl.add(new CLabel(\"                                 \", SUBTITLE_HEIGHT, Font.BOLD));\r\n\r\n        if(managerPresence) {\r\n            this.westPnl.add(deleteManagerBtn);\r\n            this.westPnl.add(deleteHotelList);\r\n        }\r\n   \r\n        this.add(centerPnl, BorderLayout.CENTER);\r\n        this.add(westPnl, BorderLayout.WEST);\r\n        this.add(southPnl, BorderLayout.SOUTH);\r\n\r\n        this.revalidate();\r\n        this.repaint();\r\n    }\r\n\r\n    public void deleteManager(){\r\n        this.remove(centerPnl);\r\n\r\n        centerPnl = new JPanel();\r\n        centerPnl.setLayout(new FlowLayout(FlowLayout.CENTER));\r\n        centerPnl.setBackground(Color.decode(\"#304D30\"));\r\n\r\n        centerPnl.add(new CLabel(\"                                                       \", SUBTITLE_HEIGHT, Font.BOLD));\r\n        centerPnl.add(new CLabel(\"Are you sure?\", 14, Font.PLAIN));\r\n        centerPnl.add(new CLabel(\"                                                       \", SUBTITLE_HEIGHT, Font.BOLD));\r\n        centerPnl.add(new CLabel(\"This action cannot be undone\", 14, Font.BOLD));\r\n        centerPnl.add(new CLabel(\"                                                       \", SUBTITLE_HEIGHT, Font.BOLD));\r\n        centerPnl.add(confirmDeleteManagerBtn);\r\n\r\n        this.add(centerPnl);\r\n        this.revalidate();\r\n        this.repaint();\r\n    }\r\n\r\n    public void deleteHotelList(){\r\n        this.remove(centerPnl);\r\n\r\n        centerPnl = new JPanel();\r\n        centerPnl.setLayout(new FlowLayout(FlowLayout.CENTER));\r\n        centerPnl.setBackground(Color.decode(\"#304D30\"));\r\n\r\n        centerPnl.add(new CLabel(\"                                                       \", SUBTITLE_HEIGHT, Font.BOLD));\r\n        centerPnl.add(new CLabel(\"Are you sure?\", 14, Font.PLAIN));\r\n        centerPnl.add(new CLabel(\"                                                       \", SUBTITLE_HEIGHT, Font.BOLD));\r\n        centerPnl.add(new CLabel(\"This action cannot be undone\", 14, Font.BOLD));\r\n        centerPnl.add(new CLabel(\"                                                       \", SUBTITLE_HEIGHT, Font.BOLD));\r\n        centerPnl.add(new CLabel(\"Input hotel list name: \", SUBTITLE_HEIGHT, Font.PLAIN));\r\n        centerPnl.add(hotelNameTf);\r\n        centerPnl.add(confirmDeleteHotelListBtn);\r\n\r\n        this.add(centerPnl);\r\n        this.revalidate();\r\n        this.repaint();\r\n    }\r\n\r\n    public void saveHotels(){\r\n        this.remove(centerPnl);\r\n\r\n        centerPnl = new JPanel();\r\n        centerPnl.setLayout(new BorderLayout());\r\n        centerPnl.setBackground(Color.decode(\"#304D30\"));\r\n\r\n        JPanel centerLeftPnl = new JPanel();\r\n\r\n        CLabel selectHotelLbl = new CLabel(\"Input name: \", SUBTITLE_HEIGHT, Font.BOLD);\r\n\r\n        centerLeftPnl.setLayout(new FlowLayout(FlowLayout.CENTER));\r\n        centerLeftPnl.setPreferredSize(new Dimension(245, CENTER_MAIN_HEIGHT));\r\n        centerLeftPnl.setBackground(Color.decode(\"#304D30\"));\r\n\r\n        this.hotelNameTf = new JTextField();\r\n        this.hotelNameTf.setPreferredSize(new Dimension(TF_WIDTH, TF_HEIGHT));\r\n\r\n        centerLeftPnl.add(selectHotelLbl);\r\n        centerLeftPnl.add(hotelNameTf);\r\n        centerLeftPnl.add(confirmSaveBtn);\r\n\r\n        setCenterTitleLblText(\"Save Hotels\");\r\n\r\n        centerPnl.add(centerTitleLbl, BorderLayout.NORTH);\r\n\r\n        centerPnl.add(centerLeftPnl, BorderLayout.WEST);\r\n        this.add(centerPnl);\r\n        centerPnl.revalidate();\r\n        centerPnl.repaint();\r\n    }\r\n\r\n    \r\n  // PRINT HOTEL PANEL\r\n    public JScrollPane printHotels(String[] hotelNames, int width){\r\n        int num;\r\n\r\n        JPanel mainHotelPnl = new JPanel();\r\n        mainHotelPnl.setLayout(new BoxLayout(mainHotelPnl, BoxLayout.Y_AXIS));\r\n        mainHotelPnl.setMaximumSize(new Dimension(width, 300));\r\n        mainHotelPnl.setBackground(Color.decode(\"#EEF0E5\"));\r\n        \r\n        for(int i = 0; i < hotelNames.length; i++){\r\n            num = i + 1;\r\n            String lbl = \"[\" + num + \"] \" + hotelNames[i];\r\n\r\n            CLabel hotel = new CLabel(lbl);\r\n            hotel.setFont(new Font(DEFAULT_FONT, Font.PLAIN, 12));\r\n            hotel.setPreferredSize(new Dimension(width-10, 20));\r\n            hotel.setMaximumSize(new Dimension(width, 20));\r\n            hotel.setForeground(Color.decode(\"#304D30\"));\r\n            \r\n \r\n            mainHotelPnl.add(hotel);\r\n         \r\n        }\r\n\r\n        JScrollPane printHotelsScrPane = new JScrollPane(mainHotelPnl);\r\n        printHotelsScrPane.setPreferredSize(new Dimension(width, 300));\r\n        printHotelsScrPane.setBackground(Color.decode(\"#EEF0E5\"));\r\n        printHotelsScrPane.setBorder(BorderFactory.createEmptyBorder());\r\n        printHotelsScrPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);\r\n\r\n        return printHotelsScrPane;\r\n    }\r\n\r\n    \r\n    // CREATE HOTEL PRESSED\r\n    public void createHotel(String[] hotelNames){\r\n        this.remove(centerPnl);\r\n\r\n        centerPnl = new JPanel();\r\n        centerPnl.setLayout(new BorderLayout());\r\n        centerPnl.setBackground(Color.decode(\"#304D30\"));\r\n        \r\n\r\n        JPanel centerRightPnl = new JPanel();\r\n        JPanel centerLeftPnl = new JPanel();\r\n        JPanel headerPnl = new JPanel();\r\n        JPanel addRoomPnl = new JPanel();\r\n\r\n        addRoomPnl.setPreferredSize(new Dimension(230, CENTER_MAIN_HEIGHT));\r\n        addRoomPnl.setLayout(new FlowLayout(FlowLayout.CENTER));\r\n        addRoomPnl.setBackground(Color.decode(\"#304D30\"));\r\n\r\n        CLabel roomAddLbl = new CLabel(\"Add Rooms              \", SUBTITLE_HEIGHT, Font.BOLD);\r\n        CLabel standardAddLbl = new CLabel(\"Standard Room         \", SUBTITLE_HEIGHT, Font.PLAIN);\r\n        CLabel deluxeAddLbl = new CLabel(\"Deluxe Room            \", SUBTITLE_HEIGHT, Font.PLAIN);\r\n        CLabel executiveAddLbl = new CLabel(\"Executive Room        \", SUBTITLE_HEIGHT, Font.PLAIN);\r\n\r\n        this.hotelNameTf = new JTextField();\r\n        this.hotelNameTf.setPreferredSize(new Dimension(TF_WIDTH, TF_HEIGHT));\r\n\r\n        this.numStandardTf = new JTextField();\r\n        this.numDeluxeTf = new JTextField();\r\n        this.numExecutiveTf = new JTextField();\r\n\r\n        this.numStandardTf.setPreferredSize(new Dimension(SMALL_TF_WIDTH, TF_HEIGHT));\r\n        this.numDeluxeTf.setPreferredSize(new Dimension(SMALL_TF_WIDTH, TF_HEIGHT));\r\n        this.numExecutiveTf.setPreferredSize(new Dimension(SMALL_TF_WIDTH, TF_HEIGHT));\r\n\r\n        centerRightPnl.setLayout(new FlowLayout(FlowLayout.RIGHT));\r\n        centerRightPnl.setPreferredSize(new Dimension(245, 300));\r\n        centerRightPnl.setBackground(Color.decode(\"#304D30\"));\r\n        centerLeftPnl.setLayout(new FlowLayout(FlowLayout.CENTER));\r\n        centerLeftPnl.setPreferredSize(new Dimension(245, 300));\r\n        centerLeftPnl.setBackground(Color.decode(\"#304D30\"));\r\n\r\n        headerPnl.setPreferredSize(new Dimension(230, TF_HEIGHT));\r\n        headerPnl.setBackground(Color.decode(\"#304D30\"));\r\n\r\n        addRoomPnl.add(roomAddLbl);\r\n\r\n        addRoomPnl.add(standardAddLbl);\r\n        addRoomPnl.add(numStandardTf);\r\n\r\n        addRoomPnl.add(deluxeAddLbl);\r\n        addRoomPnl.add(numDeluxeTf);\r\n\r\n        addRoomPnl.add(executiveAddLbl);\r\n        addRoomPnl.add(numExecutiveTf);\r\n\r\n        addRoomPnl.add(confirmBtn);\r\n\r\n        this.createLbl = new CLabel(\"Hotel Name: \",SUBTITLE_HEIGHT, Font.BOLD);\r\n        centerLeftPnl.add(createLbl);\r\n        centerLeftPnl.add(hotelNameTf);\r\n        centerLeftPnl.add(addRoomPnl);\r\n\r\n        this.openLbl = new CLabel(TF_WIDTH, TF_HEIGHT-15,\"Hotels in the system: \", SUBTITLE_HEIGHT, Font.BOLD);\r\n        headerPnl.add(openLbl);\r\n        centerRightPnl.add(headerPnl);\r\n        centerRightPnl.add(printHotels(hotelNames, 220));\r\n\r\n        setCenterTitleLblText(\"Hotel creation\");\r\n\r\n        centerPnl.add(centerTitleLbl, BorderLayout.NORTH);\r\n        centerPnl.add(centerLeftPnl, BorderLayout.WEST);\r\n        centerPnl.add(centerRightPnl, BorderLayout.EAST);\r\n        this.add(centerPnl);\r\n\r\n        this.revalidate();\r\n        this.repaint();\r\n    }\r\n\r\n    public void loadHotel(){\r\n        this.remove(centerPnl);\r\n\r\n        centerPnl = new JPanel();\r\n        centerPnl.setLayout(new BorderLayout());\r\n        centerPnl.setBackground(Color.decode(\"#304D30\"));\r\n\r\n        JPanel centerLeftPnl = new JPanel();\r\n\r\n        centerLeftPnl.setLayout(new FlowLayout(FlowLayout.CENTER));\r\n        centerLeftPnl.setPreferredSize(new Dimension(245, CENTER_MAIN_HEIGHT));\r\n        centerLeftPnl.setBackground(Color.decode(\"#304D30\"));\r\n\r\n        this.hotelNameTf = new JTextField();\r\n        this.hotelNameTf.setPreferredSize(new Dimension(TF_WIDTH, TF_HEIGHT));\r\n\r\n        CLabel selectHotelLbl = new CLabel(\"Input hotel list name: \", SUBTITLE_HEIGHT, Font.BOLD);\r\n\r\n        centerLeftPnl.add(selectHotelLbl);\r\n        centerLeftPnl.add(hotelNameTf);\r\n        centerLeftPnl.add(confirmLoadBtn);\r\n        \r\n\r\n        setCenterTitleLblText(\"Load a Hotel\");\r\n\r\n        centerPnl.add(centerTitleLbl, BorderLayout.NORTH);\r\n\r\n        centerPnl.add(centerLeftPnl, BorderLayout.WEST);\r\n        this.add(centerPnl);\r\n        centerPnl.revalidate();\r\n        centerPnl.repaint();\r\n    }\r\n\r\n    public JPanel loadHotelDetails(String[] details){\r\n        JPanel detPnl = new JPanel();\r\n        detPnl.setLayout(new FlowLayout(FlowLayout.CENTER));\r\n        detPnl.setPreferredSize(new Dimension(CENTER_MAIN_WIDTH, CENTER_MAIN_HEIGHT));\r\n        detPnl.setBackground(Color.decode(\"#304D30\"));\r\n\r\n        detPnl.add(new CLabel(\"                                         \", 22, Font.BOLD));\r\n        detPnl.add(new CLabel(\"Hotel name: \", 20, Font.BOLD));\r\n        detPnl.add(new CLabel(\"<html> \"+ details[0] + \"<html>\", SUBTITLE_HEIGHT, Font.PLAIN));\r\n        detPnl.add(new CLabel(\"                                         \", 22, Font.BOLD));\r\n        detPnl.add(new CLabel(\"Room count: \", 20, Font.BOLD));\r\n        detPnl.add(new CLabel(details[1], SUBTITLE_HEIGHT, Font.PLAIN));\r\n        detPnl.add(new CLabel(\"                                         \", 22, Font.BOLD));\r\n        detPnl.add(new CLabel(\"Reservation count: \", 20, Font.BOLD));\r\n        detPnl.add(new CLabel(details[2], SUBTITLE_HEIGHT, Font.PLAIN));\r\n\r\n        return detPnl;\r\n    }\r\n\r\n    public void selectHotel(String[] hotelNames){\r\n        this.remove(centerPnl);\r\n\r\n        centerPnl = new JPanel();\r\n        centerPnl.setLayout(new BorderLayout());\r\n        centerPnl.setBackground(Color.decode(\"#304D30\"));\r\n\r\n        JPanel centerLeftPnl = new JPanel();\r\n        JPanel centerRightPnl = new JPanel();\r\n        CLabel selectHotelLbl = new CLabel(\"Select Hotel [n]: \", SUBTITLE_HEIGHT, Font.BOLD);\r\n\r\n        centerRightPnl.setLayout(new FlowLayout(FlowLayout.CENTER));\r\n        centerRightPnl.setPreferredSize(new Dimension(245, 300));\r\n        centerRightPnl.setBackground(Color.decode(\"#304D30\"));\r\n        centerLeftPnl.setLayout(new FlowLayout(FlowLayout.CENTER));\r\n        centerLeftPnl.setPreferredSize(new Dimension(245, 300));\r\n        centerLeftPnl.setBackground(Color.decode(\"#304D30\"));\r\n\r\n        this.hotelNameTf = new JTextField();\r\n        this.hotelNameTf.setPreferredSize(new Dimension(TF_WIDTH, TF_HEIGHT));\r\n        centerLeftPnl.add(new CLabel(\"Hotels in the System: \", SUBTITLE_HEIGHT, Font.BOLD));\r\n        centerLeftPnl.add(printHotels(hotelNames, 230));\r\n\r\n        centerRightPnl.add(selectHotelLbl);\r\n        centerRightPnl.add(hotelNameTf);\r\n        centerRightPnl.add(selectBtn);\r\n\r\n        setCenterTitleLblText(\"Hotel selection\");\r\n\r\n        centerPnl.add(centerTitleLbl, BorderLayout.NORTH);\r\n        centerPnl.add(centerLeftPnl, BorderLayout.WEST);\r\n        centerPnl.add(centerRightPnl, BorderLayout.EAST);\r\n        this.add(centerPnl);\r\n        centerPnl.revalidate();\r\n        centerPnl.repaint();\r\n    }\r\n\r\n    // there is a selected hotel\r\n    public void openHotel(String[] details){\r\n        this.remove(centerPnl);\r\n\r\n        centerPnl = new JPanel(new BorderLayout());\r\n        centerPnl.setBackground(Color.decode(\"#304D30\"));\r\n        centerPnl.setPreferredSize(new Dimension(CENTER_MAIN_WIDTH, CENTER_MAIN_HEIGHT));\r\n\r\n        this.westPnl.remove(this.createBtn);\r\n        this.westPnl.remove(this.openBtn);\r\n        this.westPnl.remove(this.loadBtn);\r\n        this.westPnl.remove(this.saveBtn);\r\n        this.westPnl.remove(this.loadBtn);\r\n        this.westPnl.remove(this.logoutBtn);\r\n\r\n        setCenterTitleLblText(\"General Hotel Details\");\r\n        this.centerPnl.add(centerTitleLbl, BorderLayout.NORTH);\r\n        centerPnl.add(loadHotelDetails(details), BorderLayout.CENTER);\r\n\r\n        westPnl.add(backBtn);\r\n        this.westPnl.add(inquireBtn);\r\n        this.westPnl.add(manageBtn);\r\n        this.westPnl.add(reserveBtn);\r\n\r\n        this.add(centerPnl, BorderLayout.CENTER);\r\n        this.revalidate();\r\n        this.repaint();\r\n    }\r\n\r\n    public JPanel inquireHotelLeftPanel(){\r\n        JPanel centerLeftPnl = new JPanel();\r\n\r\n        centerLeftPnl.setLayout(new FlowLayout(FlowLayout.CENTER));\r\n        centerLeftPnl.setPreferredSize(new Dimension(SMALL_BTN_WIDTH+10, CENTER_MAIN_HEIGHT));\r\n        centerLeftPnl.setBackground(Color.decode(\"#304D30\"));\r\n\r\n        centerLeftPnl.add(iHotelBtn);\r\n        centerLeftPnl.add(iRoomBtn);\r\n        centerLeftPnl.add(iResBtn);\r\n        centerLeftPnl.add(iDateBtn);\r\n\r\n        return centerLeftPnl;\r\n    }\r\n\r\n    public void inquireHotel(){\r\n        this.remove(this.centerPnl);\r\n        centerPnl = new JPanel();\r\n        JPanel centerLeftPnl = new JPanel();\r\n        //ctrleft panel\r\n\r\n        centerPnl.setLayout(new BorderLayout());\r\n\r\n        setCenterTitleLblText(\"Inquire Hotel\");\r\n\r\n        this.centerPnl.add(centerTitleLbl, BorderLayout.NORTH);\r\n        this.centerPnl.add(inquireHotelLeftPanel(), BorderLayout.WEST);\r\n        centerLeftPnl.setBackground(Color.decode(\"#304D30\"));\r\n        centerPnl.setBackground(Color.decode(\"#304D30\"));\r\n\r\n        this.add(westPnl, BorderLayout.WEST);\r\n        this.add(centerPnl, BorderLayout.CENTER);\r\n\r\n        this.revalidate();\r\n        this.repaint();\r\n    }\r\n\r\n\r\n    public void inquireHotelInfo(String hotelName, int roomCount, int standardRmCt,\r\n                                 int delRmCt, int exRmCt,  double earnings){\r\n        this.remove(centerPnl);\r\n        centerPnl = new JPanel(new BorderLayout());\r\n        centerPnl.setBackground(Color.decode(\"#304D30\"));\r\n\r\n        JPanel centerRightPnl = new JPanel();\r\n        centerRightPnl.setLayout(new FlowLayout());\r\n        centerRightPnl.setPreferredSize(new Dimension(CENTER_MAIN_WIDTH, CENTER_MAIN_HEIGHT));\r\n        centerRightPnl.setBackground(Color.decode(\"#304D30\"));\r\n\r\n        JPanel hotelNamePnl  = new JPanel();\r\n        hotelNamePnl.setPreferredSize(new Dimension(BTN_WIDTH+10, TF_HEIGHT));\r\n        hotelNamePnl.setBackground(Color.decode(\"#304D30\"));\r\n        CLabel hotelNameLbl = new CLabel(\"Hotel Name: \" + hotelName, SUBTITLE_HEIGHT, Font.BOLD);\r\n        hotelNamePnl.add(hotelNameLbl);\r\n\r\n        JPanel roomCountPnl = new JPanel();\r\n        roomCountPnl.setPreferredSize(new Dimension(BTN_WIDTH+10, TF_HEIGHT*3));\r\n        roomCountPnl.setBackground(Color.decode(\"#304D30\"));\r\n        CLabel roomCountLbl = new CLabel(\"Total Room Count: \" + roomCount, SUBTITLE_HEIGHT, Font.BOLD);\r\n        CLabel standardCountLbl = new CLabel(\"Standard Rooms: \" + standardRmCt, SUBTITLE_HEIGHT, Font.PLAIN);\r\n        CLabel deluxeCountLbl = new CLabel(\"Deluxe Rooms: \" + delRmCt, SUBTITLE_HEIGHT, Font.PLAIN);\r\n        CLabel execCountLbl = new CLabel(\"Executive Rooms: \" + exRmCt, SUBTITLE_HEIGHT, Font.PLAIN);\r\n        roomCountPnl.add(roomCountLbl);\r\n        roomCountPnl.add(standardCountLbl);\r\n        roomCountPnl.add(deluxeCountLbl);\r\n        roomCountPnl.add(execCountLbl);\r\n\r\n        JPanel earningsPnl = new JPanel();\r\n        earningsPnl.setPreferredSize(new Dimension(BTN_WIDTH+10, TF_HEIGHT*2));\r\n        earningsPnl.setBackground(Color.decode(\"#304D30\"));\r\n        \r\n        DecimalFormat df = new DecimalFormat(\"###,###,##0.00\");    \r\n        String earningsString = df.format(earnings);  \r\n\r\n        CLabel earningsLbl = new CLabel(BTN_WIDTH, SUBTITLE_HEIGHT*2, \"<html>\"+\"Est. earnings for the month:\" + \"<html>\"\r\n                + \"<html> \" + earningsString + \"<html>\", SUBTITLE_HEIGHT,Font.BOLD);\r\n        earningsPnl.add(earningsLbl);\r\n\r\n        centerRightPnl.add(new CLabel(\"                                 \", SUBTITLE_HEIGHT, Font.BOLD));\r\n        centerRightPnl.add(hotelNamePnl);\r\n        centerRightPnl.add(roomCountPnl);\r\n        centerRightPnl.add(earningsPnl);\r\n\r\n        setCenterTitleLblText(\"Hotel Information\");\r\n        centerPnl.add(centerRightPnl, BorderLayout.EAST);\r\n        centerPnl.add(centerTitleLbl, BorderLayout.NORTH);\r\n        centerPnl.add(inquireHotelLeftPanel(), BorderLayout.WEST);\r\n      \r\n\r\n        this.add(centerPnl, BorderLayout.CENTER);\r\n        this.revalidate();\r\n        this.repaint();\r\n    }\r\n\r\n    public JScrollPane printAvailableRooms(String[] roomNames, int height){\r\n        int num;\r\n        \r\n        JPanel mainRoomPnl = new JPanel();\r\n        mainRoomPnl.setLayout(new BoxLayout(mainRoomPnl, BoxLayout.Y_AXIS));\r\n        mainRoomPnl.setMaximumSize(new Dimension(Short.MAX_VALUE, height));\r\n        mainRoomPnl.setBackground(Color.decode(\"#EEF0E5\"));\r\n\r\n        for(int i = 0; i < roomNames.length; i++){\r\n            num = i + 1;\r\n            String lbl = \"[\" + num + \"] \" + roomNames[i];\r\n            CLabel room = new CLabel(lbl);\r\n            room.setFont(new Font(DEFAULT_FONT, Font.PLAIN, 12));\r\n            room.setPreferredSize(new Dimension(BTN_WIDTH-10, 20));\r\n            room.setMaximumSize(new Dimension(Short.MAX_VALUE, 20));\r\n            room.setForeground(Color.decode(\"#304D30\"));\r\n            \r\n            mainRoomPnl.add(room);\r\n         \r\n        }\r\n\r\n        JScrollPane printRoomsScrPane = new JScrollPane(mainRoomPnl);\r\n        printRoomsScrPane.setPreferredSize(new Dimension(BTN_WIDTH+5, height));\r\n        printRoomsScrPane.setBackground(Color.decode(\"#EEF0E5\"));\r\n        printRoomsScrPane.setBorder(BorderFactory.createEmptyBorder());\r\n        printRoomsScrPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);\r\n\r\n        return printRoomsScrPane;\r\n    }\r\n\r\n    public void displayDateInfo(int day, int bookedRooms, int freeRooms, String[] roomNames){\r\n        this.remove(centerPnl);\r\n        centerPnl = new JPanel(new BorderLayout());\r\n\r\n        this.remove(infoRightPnl);\r\n\r\n        this.infoRightPnl = new JPanel();\r\n        \r\n        this.infoRightPnl.setLayout(new FlowLayout(FlowLayout.CENTER));\r\n        infoRightPnl.setPreferredSize(new Dimension(CENTER_MAIN_WIDTH, 400));\r\n        infoRightPnl.setBackground(Color.decode(\"#304D30\"));\r\n\r\n        CLabel iDateHeaderLbl = new CLabel(\"Inquire Date\", SUBTITLE_HEIGHT, Font.BOLD);\r\n\r\n        infoRightPnl.add(iDateHeaderLbl);\r\n\r\n        CLabel bookedRoomLbl = new CLabel(\"Total Number of Booked Rooms: \" + bookedRooms, SUBTITLE_HEIGHT, Font.PLAIN);\r\n        CLabel freeRoomLbl = new CLabel(\"Total Number of Available Rooms: \" + freeRooms, SUBTITLE_HEIGHT, Font.PLAIN);\r\n\r\n        infoRightPnl.add(bookedRoomLbl);\r\n        infoRightPnl.add(freeRoomLbl);\r\n\r\n        infoRightPnl.add(printAvailableRooms(roomNames, 200));\r\n\r\n        infoRightPnl.add(dateBackBtn);\r\n        \r\n        setCenterTitleLblText(\"Hotel Availability\");\r\n\r\n        centerPnl.add(centerTitleLbl, BorderLayout.NORTH);\r\n        centerPnl.add(inquireHotelLeftPanel(), BorderLayout.WEST);\r\n        centerPnl.add(infoRightPnl, BorderLayout.EAST);\r\n        centerPnl.setBackground(Color.decode(\"#304D30\"));\r\n\r\n        this.add(centerPnl, BorderLayout.CENTER);\r\n        this.revalidate();\r\n        this.repaint();\r\n    }\r\n\r\n    public void inquireRoomInfo(String[] roomNames){\r\n        this.remove(centerPnl);\r\n        centerPnl = new JPanel(new BorderLayout());\r\n        centerPnl.setBackground(Color.decode(\"#304D30\"));\r\n\r\n        JPanel centerRightPnl = new JPanel();\r\n        centerRightPnl.setLayout(new FlowLayout());\r\n        centerRightPnl.setPreferredSize(new Dimension(CENTER_MAIN_WIDTH, CENTER_MAIN_HEIGHT));\r\n        centerRightPnl.setBackground(Color.decode(\"#304D30\"));\r\n\r\n        this.generalTf = new JTextField();\r\n        generalTf.setPreferredSize(new Dimension(SMALL_TF_WIDTH, TF_HEIGHT));\r\n\r\n        centerRightPnl.add(new CLabel(\"Rooms in the hotel: \", SUBTITLE_HEIGHT, Font.BOLD));\r\n        centerRightPnl.add(printRooms(roomNames, CENTER_MAIN_WIDTH-10,300));\r\n        centerRightPnl.add(new CLabel(\"Select Room [n] \", SUBTITLE_HEIGHT, Font.BOLD));\r\n        centerRightPnl.add(generalTf);\r\n\r\n        centerRightPnl.add(selectRoomBtn);\r\n\r\n        setCenterTitleLblText(\"Inquire Room\");\r\n\r\n        centerPnl.add(centerTitleLbl, BorderLayout.NORTH);\r\n        centerPnl.add(inquireHotelLeftPanel(), BorderLayout.WEST);\r\n        centerPnl.add(centerRightPnl, BorderLayout.EAST);\r\n\r\n        this.add(centerPnl, BorderLayout.CENTER);\r\n        this.revalidate();\r\n        this.repaint();\r\n    }\r\n\r\n    public void inquireSelectedRoom(String roomName, double price, String[] availableDates){\r\n        this.remove(centerPnl);\r\n        centerPnl = new JPanel(new BorderLayout());\r\n\r\n        JPanel centerRightPnl = new JPanel();\r\n        centerRightPnl.setLayout(new FlowLayout());\r\n        centerRightPnl.setPreferredSize(new Dimension(CENTER_MAIN_WIDTH+10, CENTER_MAIN_HEIGHT));\r\n        centerRightPnl.setBackground(Color.decode(\"#304D30\"));\r\n\r\n        JPanel datePnl = new JPanel();\r\n        datePnl.setLayout(new FlowLayout(FlowLayout.CENTER));\r\n        datePnl.setPreferredSize(new Dimension(CENTER_MAIN_WIDTH, CENTER_MAIN_HEIGHT));\r\n        datePnl.setBackground(Color.decode(\"#304D30\"));\r\n\r\n        centerRightPnl.add(new CLabel(\"                                                  \", SUBTITLE_HEIGHT, Font.BOLD));\r\n        centerRightPnl.add(new CLabel(\"Room name: \", SUBTITLE_HEIGHT, Font.BOLD));\r\n        centerRightPnl.add(new CLabel(roomName, SUBTITLE_HEIGHT, Font.PLAIN));\r\n        centerRightPnl.add(new CLabel(\"Price per night: \", SUBTITLE_HEIGHT, Font.BOLD));\r\n        centerRightPnl.add(new CLabel(\"\"+price, SUBTITLE_HEIGHT, Font.PLAIN));\r\n        centerRightPnl.add(new CLabel(\"                                                  \", SUBTITLE_HEIGHT, Font.BOLD));\r\n        centerRightPnl.add(new CLabel(\"Availability: \", SUBTITLE_HEIGHT, Font.BOLD));\r\n\r\n        for(int i = 0; i < 5; i++) {\r\n            datePnl.add(new CLabel(\"                                                  \", SUBTITLE_HEIGHT, Font.BOLD));\r\n            datePnl.add(new CLabel(\"<html>\" + availableDates[i] + \"<html>\", SUBTITLE_HEIGHT-2,Font.PLAIN));\r\n        }\r\n\r\n        centerRightPnl.add(datePnl);\r\n\r\n        setCenterTitleLblText(\"Inquire Room\");\r\n\r\n        centerPnl.add(centerTitleLbl, BorderLayout.NORTH);\r\n        centerPnl.add(inquireHotelLeftPanel(), BorderLayout.WEST);\r\n        centerPnl.add(centerRightPnl, BorderLayout.EAST);\r\n\r\n        this.add(centerPnl, BorderLayout.CENTER);\r\n        this.revalidate();\r\n        this.repaint();\r\n    }\r\n\r\n    public void inquireDatesPanel(){\r\n        this.remove(centerPnl);\r\n        centerPnl = new JPanel(new BorderLayout());\r\n        centerPnl.setBackground(Color.decode(\"#304D30\"));\r\n\r\n        this.infoRightPnl = new JPanel();\r\n\r\n        this.infoRightPnl.setLayout(new FlowLayout(FlowLayout.CENTER));\r\n        infoRightPnl.setPreferredSize(new Dimension(CENTER_MAIN_WIDTH, 400));\r\n        infoRightPnl.setBackground(Color.decode(\"#304D30\"));\r\n        \r\n        CLabel iDateHeaderLbl = new CLabel(\"Select date\", SUBTITLE_HEIGHT, Font.BOLD);\r\n\r\n        JPanel dateHeaderPnl = new JPanel();\r\n        dateHeaderPnl.setLayout(new FlowLayout(FlowLayout.CENTER));\r\n        dateHeaderPnl.setPreferredSize(new Dimension(CENTER_MAIN_WIDTH, 30));\r\n        dateHeaderPnl.setBackground(Color.decode(\"#304D30\"));\r\n        dateHeaderPnl.add(iDateHeaderLbl);\r\n        \r\n        infoRightPnl.add(dateHeaderPnl);\r\n\r\n        for(int i=0; i<30; i++)\r\n            infoRightPnl.add(this.dateButtons[i]);\r\n            \r\n        setCenterTitleLblText(\"Hotel Availability\");\r\n\r\n        centerPnl.add(centerTitleLbl, BorderLayout.NORTH);\r\n        centerPnl.add(inquireHotelLeftPanel(), BorderLayout.WEST);\r\n        centerPnl.add(infoRightPnl, BorderLayout.EAST);\r\n\r\n        this.add(centerPnl, BorderLayout.CENTER);\r\n        this.revalidate();\r\n        this.repaint();\r\n    }\r\n        \r\n\r\n    public JPanel manageHotelLeftPanel(){\r\n        JPanel centerLeftPnl = new JPanel();\r\n\r\n        centerLeftPnl.setLayout(new FlowLayout(FlowLayout.CENTER));\r\n        centerLeftPnl.setPreferredSize(new Dimension(SMALL_BTN_WIDTH+10, 300));\r\n        centerLeftPnl.setBackground(Color.decode(\"#304D30\"));\r\n\r\n        centerLeftPnl.add(renameBtn);\r\n        centerLeftPnl.add(addRoomBtn);\r\n        centerLeftPnl.add(removeRoomBtn);\r\n        centerLeftPnl.add(updatePriceBtn);\r\n        centerLeftPnl.add(datePriceBtn);\r\n        centerLeftPnl.add(removeReservationBtn);\r\n        centerLeftPnl.add(removeHotelBtn);\r\n\r\n        return centerLeftPnl;\r\n    }\r\n\r\n    public void manageHotel(){\r\n        this.remove(this.centerPnl);\r\n\r\n        centerPnl = new JPanel();\r\n        centerPnl.setBackground(Color.decode(\"#304D30\"));\r\n        centerPnl.setLayout(new BorderLayout());\r\n\r\n        JPanel centerLeftPnl = new JPanel();\r\n        centerLeftPnl.setLayout(new FlowLayout(FlowLayout.CENTER));\r\n        centerLeftPnl.setPreferredSize(new Dimension(SMALL_BTN_WIDTH+10, 300));\r\n        centerLeftPnl.setBackground(Color.decode(\"#304D30\"));\r\n\r\n        setCenterTitleLblText(\"Manage Hotel\");\r\n\r\n        centerPnl.add(centerTitleLbl, BorderLayout.NORTH);\r\n        centerPnl.add(manageHotelLeftPanel(), BorderLayout.WEST);\r\n        this.add(centerPnl, BorderLayout.CENTER);\r\n\r\n        this.revalidate();\r\n        this.repaint();\r\n    }\r\n\r\n    public void renameHotel(){\r\n        this.remove(centerPnl);\r\n\r\n        JPanel centerRightPnl = new JPanel(new FlowLayout(FlowLayout.CENTER));\r\n        centerRightPnl.setPreferredSize(new Dimension(CENTER_MAIN_WIDTH, CENTER_MAIN_HEIGHT));\r\n        centerRightPnl.setBackground(Color.decode(\"#304D30\"));\r\n\r\n        centerPnl = new JPanel();\r\n        centerPnl.setLayout(new BorderLayout());\r\n        centerPnl.setBackground(Color.decode(\"#304D30\"));\r\n\r\n        centerRightPnl.add(new CLabel(\"                                 \", SUBTITLE_HEIGHT, Font.BOLD));\r\n        CLabel nameLbl = new CLabel(\"New Hotel Name:\", SUBTITLE_HEIGHT, Font.BOLD);\r\n        this.newNameTf = new JTextField();\r\n        this.newNameTf.setPreferredSize(new Dimension(TF_WIDTH, TF_HEIGHT));\r\n\r\n        centerRightPnl.add(nameLbl);\r\n        centerRightPnl.add(newNameTf);\r\n        centerRightPnl.add(confirmRenameBtn);\r\n\r\n        setCenterTitleLblText(\"Rename Hotel\");\r\n\r\n        centerPnl.add(centerTitleLbl, BorderLayout.NORTH);\r\n        this.centerPnl.add(manageHotelLeftPanel(), BorderLayout.WEST);\r\n        this.centerPnl.add(centerRightPnl, BorderLayout.EAST);\r\n\r\n        this.add(centerPnl);\r\n        this.revalidate();\r\n        this.repaint();\r\n    }\r\n\r\n    public void addRoom(){\r\n        this.remove(centerPnl);\r\n\r\n        JPanel centerRightPnl = new JPanel(new FlowLayout(FlowLayout.CENTER));\r\n        centerRightPnl.setPreferredSize(new Dimension(CENTER_MAIN_WIDTH, CENTER_MAIN_HEIGHT));\r\n        centerRightPnl.setBackground(Color.decode(\"#304D30\"));\r\n\r\n        centerPnl = new JPanel();\r\n        centerPnl.setLayout(new BorderLayout());\r\n        centerPnl.setBackground(Color.decode(\"#304D30\"));\r\n\r\n        JPanel addRoomPnl = new JPanel();\r\n        addRoomPnl.setPreferredSize(new Dimension(CENTER_MAIN_WIDTH, CENTER_MAIN_HEIGHT));\r\n        addRoomPnl.setLayout(new FlowLayout(FlowLayout.CENTER));\r\n        addRoomPnl.setBackground(Color.decode(\"#304D30\"));\r\n\r\n        centerRightPnl.add(new CLabel(\"                                 \", SUBTITLE_HEIGHT, Font.BOLD));\r\n        CLabel roomAddLbl = new CLabel(\"Room Amount       \", SUBTITLE_HEIGHT, Font.BOLD);\r\n        CLabel standardAddLbl = new CLabel(\"Standard Room         \", SUBTITLE_HEIGHT, Font.PLAIN);\r\n        CLabel deluxeAddLbl = new CLabel(\"Deluxe Room            \", SUBTITLE_HEIGHT, Font.PLAIN);\r\n        CLabel executiveAddLbl = new CLabel(\"Executive Room        \", SUBTITLE_HEIGHT, Font.PLAIN);\r\n\r\n        this.hotelNameTf = new JTextField();\r\n        this.hotelNameTf.setPreferredSize(new Dimension(TF_WIDTH, TF_HEIGHT));\r\n\r\n        this.numStandardTf = new JTextField();\r\n        this.numDeluxeTf = new JTextField();\r\n        this.numExecutiveTf = new JTextField();\r\n\r\n        this.numStandardTf.setPreferredSize(new Dimension(SMALL_TF_WIDTH, TF_HEIGHT));\r\n        this.numDeluxeTf.setPreferredSize(new Dimension(SMALL_TF_WIDTH, TF_HEIGHT));\r\n        this.numExecutiveTf.setPreferredSize(new Dimension(SMALL_TF_WIDTH, TF_HEIGHT));\r\n\r\n        centerRightPnl.setLayout(new FlowLayout(FlowLayout.CENTER));\r\n\r\n        addRoomPnl.add(roomAddLbl);\r\n\r\n        addRoomPnl.add(standardAddLbl);\r\n        addRoomPnl.add(numStandardTf);\r\n\r\n        addRoomPnl.add(deluxeAddLbl);\r\n        addRoomPnl.add(numDeluxeTf);\r\n\r\n        addRoomPnl.add(executiveAddLbl);\r\n        addRoomPnl.add(numExecutiveTf);\r\n\r\n        addRoomPnl.add(confirmAddRmBtn);\r\n\r\n        centerRightPnl.add(addRoomPnl);\r\n\r\n        setCenterTitleLblText(\"Add Room\");\r\n\r\n        centerPnl.add(centerTitleLbl, BorderLayout.NORTH);\r\n        centerPnl.add(manageHotelLeftPanel(), BorderLayout.WEST);\r\n        centerPnl.add(centerRightPnl, BorderLayout.EAST);\r\n\r\n        this.add(centerPnl);\r\n        this.revalidate();\r\n        this.repaint();\r\n    }\r\n\r\n    public void removeRoom(String[] roomNames){\r\n        this.remove(centerPnl);\r\n\r\n        JPanel centerRightPnl = new JPanel(new FlowLayout(FlowLayout.CENTER));\r\n        centerRightPnl.setPreferredSize(new Dimension(CENTER_MAIN_WIDTH, CENTER_MAIN_HEIGHT));\r\n        centerRightPnl.setBackground(Color.decode(\"#304D30\"));\r\n\r\n        centerPnl = new JPanel();\r\n        centerPnl.setLayout(new BorderLayout());\r\n        centerPnl.setBackground(Color.decode(\"#304D30\"));\r\n        \r\n        JPanel roomPnl = new JPanel();\r\n        roomPnl.setPreferredSize(new Dimension(CENTER_MAIN_WIDTH, 315));\r\n        roomPnl.setLayout(new FlowLayout(FlowLayout.CENTER));\r\n        roomPnl.setBackground(Color.decode(\"#304D30\"));\r\n\r\n        JPanel selectionPnl = new JPanel(new FlowLayout());\r\n        selectionPnl.setPreferredSize(new Dimension(CENTER_MAIN_WIDTH, 150));\r\n        selectionPnl.setLayout(new FlowLayout(FlowLayout.CENTER));\r\n        selectionPnl.setBackground(Color.decode(\"#304D30\"));\r\n\r\n        this.generalTf = new JTextField();\r\n        generalTf.setPreferredSize(new Dimension(TF_WIDTH, TF_HEIGHT));\r\n\r\n        CLabel selectRoomLbl = new CLabel(\"Select Room [n]: \", SUBTITLE_HEIGHT, Font.BOLD);\r\n        roomPnl.add(new CLabel(\"Rooms in the hotel: \", SUBTITLE_HEIGHT, Font.BOLD));\r\n        roomPnl.add(printRooms(roomNames, CENTER_MAIN_WIDTH-10, 280));\r\n        selectionPnl.add(selectRoomLbl, new FlowLayout(FlowLayout.CENTER));\r\n        selectionPnl.add(generalTf, new FlowLayout(FlowLayout.CENTER));\r\n        selectionPnl.add(confirmRemoveRmBtn, new FlowLayout(FlowLayout.CENTER));\r\n\r\n        centerRightPnl.add(roomPnl, BorderLayout.NORTH);\r\n        centerRightPnl.add(selectionPnl, BorderLayout.SOUTH);\r\n\r\n        setCenterTitleLblText(\"Remove Room\");\r\n\r\n        centerPnl.add(centerTitleLbl, BorderLayout.NORTH);\r\n        centerPnl.add(manageHotelLeftPanel(), BorderLayout.WEST);\r\n        centerPnl.add(centerRightPnl, BorderLayout.EAST);\r\n\r\n        this.add(centerPnl);\r\n        this.revalidate();\r\n        this.repaint();\r\n    }\r\n\r\n    public void updatePrice(double basePrice){\r\n        this.remove(centerPnl);\r\n\r\n        centerPnl = new JPanel();\r\n        centerPnl.setLayout(new BorderLayout());\r\n        centerPnl.setBackground(Color.decode(\"#304D30\"));\r\n\r\n        JPanel centerRightPnl = new JPanel(new FlowLayout(FlowLayout.CENTER));\r\n        centerRightPnl.setPreferredSize(new Dimension(CENTER_MAIN_WIDTH, CENTER_MAIN_HEIGHT));\r\n        centerRightPnl.setBackground(Color.decode(\"#304D30\"));\r\n\r\n        centerRightPnl.add(new CLabel(\"                                 \", SUBTITLE_HEIGHT, Font.BOLD));\r\n\r\n        CLabel currentPriceLbl = new CLabel(\"Current Base Price: \" , SUBTITLE_HEIGHT, Font.BOLD);\r\n        CLabel priceLbl = new CLabel( Double.toString(basePrice) , SUBTITLE_HEIGHT, Font.ITALIC);\r\n\r\n        this.generalTf = new JTextField();\r\n        generalTf.setPreferredSize(new Dimension(TF_WIDTH, TF_HEIGHT));\r\n\r\n        centerRightPnl.add(currentPriceLbl);\r\n        centerRightPnl.add(priceLbl);\r\n        centerRightPnl.add(new CLabel(\"New price can not be less than 150\" , SUBTITLE_HEIGHT-5, Font.ITALIC));\r\n        centerRightPnl.add(generalTf);\r\n        centerRightPnl.add(confirmUpdatePriceBtn);\r\n\r\n        setCenterTitleLblText(\"Update Price\");\r\n\r\n        centerPnl.add(centerTitleLbl, BorderLayout.NORTH);\r\n        centerPnl.add(manageHotelLeftPanel(), BorderLayout.WEST);\r\n        centerPnl.add(centerRightPnl, BorderLayout.EAST);\r\n\r\n        this.add(centerPnl);\r\n        this.revalidate();\r\n        this.repaint();\r\n    }\r\n\r\n    public void datePrice(double[] prices){\r\n        this.remove(centerPnl);\r\n\r\n        centerPnl = new JPanel();\r\n        centerPnl.setLayout(new BorderLayout());\r\n        centerPnl.setBackground(Color.decode(\"#304D30\"));\r\n\r\n        JPanel centerRightPnl = new JPanel(new FlowLayout(FlowLayout.CENTER));\r\n        centerRightPnl.setPreferredSize(new Dimension(CENTER_MAIN_WIDTH, CENTER_MAIN_HEIGHT));\r\n        centerRightPnl.setBackground(Color.decode(\"#304D30\"));\r\n\r\n        JPanel selectionPnl = new JPanel(new FlowLayout());\r\n        JPanel pricePnl = new JPanel();\r\n\r\n        pricePnl.setPreferredSize(new Dimension(CENTER_MAIN_WIDTH, 300));\r\n        pricePnl.setLayout(new FlowLayout(FlowLayout.CENTER));\r\n        pricePnl.setBackground(Color.decode(\"#304D30\"));\r\n\r\n        selectionPnl.setPreferredSize(new Dimension(CENTER_MAIN_WIDTH, 150));\r\n        selectionPnl.setLayout(new FlowLayout(FlowLayout.CENTER));\r\n        selectionPnl.setBackground(Color.decode(\"#304D30\"));\r\n\r\n\r\n        this.generalTf = new JTextField();\r\n        this.general2Tf = new JTextField();\r\n        generalTf.setPreferredSize(new Dimension(TF_WIDTH/2-2, TF_HEIGHT));\r\n        general2Tf.setPreferredSize(new Dimension(TF_WIDTH/2-2, TF_HEIGHT));\r\n\r\n        CLabel datePriceLbl = new CLabel(\"       [Date]    [%Modifier]    \", SUBTITLE_HEIGHT, Font.BOLD);\r\n        pricePnl.add(new CLabel(\"Price multiplier per date: \", SUBTITLE_HEIGHT, Font.BOLD));\r\n        pricePnl.add(printPricePerDate(prices, CENTER_MAIN_WIDTH -10, 270));\r\n        selectionPnl.add(new CLabel(\"New % can range from 50% to 150%\", SUBTITLE_HEIGHT-5, Font.ITALIC));\r\n        selectionPnl.add(datePriceLbl, new FlowLayout(FlowLayout.CENTER));\r\n        selectionPnl.add(generalTf, new FlowLayout(FlowLayout.CENTER));\r\n        selectionPnl.add(general2Tf, new FlowLayout(FlowLayout.CENTER));\r\n        selectionPnl.add(confirmDatePriceBtn, new FlowLayout(FlowLayout.CENTER));\r\n\r\n        centerRightPnl.add(pricePnl, BorderLayout.NORTH);\r\n        centerRightPnl.add(selectionPnl, BorderLayout.SOUTH);\r\n\r\n        setCenterTitleLblText(\"Update Date Price\");\r\n\r\n        centerPnl.add(centerTitleLbl, BorderLayout.NORTH);\r\n        centerPnl.add(manageHotelLeftPanel(), BorderLayout.WEST);\r\n        centerPnl.add(centerRightPnl, BorderLayout.EAST);\r\n\r\n        this.add(centerPnl);\r\n        this.revalidate();\r\n        this.repaint();\r\n    }\r\n\r\n    public void displaySelectedReservation(String[] reservationDetails, String[] breakdown){\r\n        this.remove(centerPnl);\r\n\r\n        centerPnl = new JPanel();\r\n        centerPnl.setLayout(new BorderLayout());\r\n        centerPnl.setBackground(Color.decode(\"#304D30\"));\r\n\r\n\r\n        JPanel centerRightPnl = new JPanel(new FlowLayout(FlowLayout.CENTER));\r\n        centerRightPnl.setPreferredSize(new Dimension(CENTER_MAIN_WIDTH, CENTER_MAIN_HEIGHT));\r\n        centerRightPnl.setBackground(Color.decode(\"#304D30\"));\r\n\r\n\r\n        CLabel resInfoHeaderLbl = new CLabel(\"Reservation Information\", SUBTITLE_HEIGHT, Font.BOLD);\r\n\r\n        centerRightPnl.add(resInfoHeaderLbl);\r\n\r\n        for(String r : reservationDetails){\r\n\r\n            CLabel resInfoLbl = new CLabel(r+\"\", SUBTITLE_HEIGHT, Font.PLAIN);\r\n            centerRightPnl.add(resInfoLbl);\r\n        }\r\n\r\n        CLabel spacerLbl = new CLabel(\"                                      \", SUBTITLE_HEIGHT, Font.PLAIN);\r\n        centerRightPnl.add(spacerLbl);\r\n        \r\n        JPanel mainBreakdownPnl = new JPanel();\r\n        mainBreakdownPnl.setLayout(new BoxLayout(mainBreakdownPnl, BoxLayout.Y_AXIS));\r\n        mainBreakdownPnl.setMaximumSize(new Dimension(Short.MAX_VALUE, 200));\r\n        mainBreakdownPnl.setBackground(Color.decode(\"#EEF0E5\"));\r\n\r\n\r\n        for (String line : breakdown) {\r\n            CLabel dayPrompt = new CLabel(line);\r\n            dayPrompt.setFont(new Font(DEFAULT_FONT, Font.PLAIN, 12));\r\n            dayPrompt.setPreferredSize(new Dimension(BTN_WIDTH-10, 20));\r\n            dayPrompt.setMaximumSize(new Dimension(Short.MAX_VALUE, 20));\r\n            dayPrompt.setForeground(Color.decode(\"#304D30\"));\r\n\r\n            mainBreakdownPnl.add(dayPrompt);\r\n        }\r\n        \r\n        JScrollPane printBreakdownScrPane = new JScrollPane(mainBreakdownPnl);\r\n        printBreakdownScrPane.setPreferredSize(new Dimension(BTN_WIDTH+5, 200));\r\n        printBreakdownScrPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);\r\n\r\n        CLabel breakdownHeader = new CLabel(\"Price Breakdown\", SUBTITLE_HEIGHT, Font.BOLD);\r\n        centerRightPnl.add(breakdownHeader);\r\n        centerRightPnl.add(printBreakdownScrPane);\r\n\r\n        setCenterTitleLblText(\"Inquire Reservation\");\r\n\r\n        centerPnl.add(centerTitleLbl, BorderLayout.NORTH);\r\n        centerPnl.add(inquireHotelLeftPanel(), BorderLayout.WEST);\r\n        centerPnl.add(centerRightPnl, BorderLayout.EAST);\r\n\r\n        this.add(centerPnl);\r\n        this.revalidate();\r\n        this.repaint();\r\n\r\n    }\r\n\r\n    public void inquireReservation(int roomCount, String[][] reservationNames){\r\n        this.remove(centerPnl);\r\n\r\n        JPanel centerRightPnl = new JPanel(new FlowLayout(FlowLayout.CENTER));\r\n        centerRightPnl.setPreferredSize(new Dimension(CENTER_MAIN_WIDTH, CENTER_MAIN_HEIGHT));\r\n        centerRightPnl.setBackground(Color.decode(\"#304D30\"));\r\n\r\n        centerPnl = new JPanel();\r\n        centerPnl.setLayout(new BorderLayout());\r\n        centerPnl.setBackground(Color.decode(\"#304D30\"));\r\n\r\n        JPanel resPnl = new JPanel();\r\n        resPnl.setPreferredSize(new Dimension(CENTER_MAIN_WIDTH, 315));\r\n        resPnl.setLayout(new FlowLayout(FlowLayout.CENTER));\r\n        resPnl.setBackground(Color.decode(\"#304D30\"));\r\n\r\n        JPanel selectionPnl = new JPanel(new FlowLayout());\r\n        selectionPnl.setPreferredSize(new Dimension(CENTER_MAIN_WIDTH, 150));\r\n        selectionPnl.setLayout(new FlowLayout(FlowLayout.CENTER));\r\n        selectionPnl.setBackground(Color.decode(\"#304D30\"));\r\n\r\n        this.generalTf = new JTextField();\r\n        this.general2Tf = new JTextField();\r\n        generalTf.setPreferredSize(new Dimension(TF_WIDTH/2-3, TF_HEIGHT));\r\n        general2Tf.setPreferredSize(new Dimension(TF_WIDTH/2-1, TF_HEIGHT));\r\n\r\n        CLabel selectRoomLbl = new CLabel(\"     [Room]  [Reservation]\", SUBTITLE_HEIGHT, Font.BOLD);\r\n\r\n        resPnl.add(new CLabel(\"Rooms in the hotel: \", SUBTITLE_HEIGHT, Font.BOLD));\r\n        resPnl.add(printReservation(roomCount, reservationNames, CENTER_MAIN_WIDTH -10, 280));\r\n        selectionPnl.add(selectRoomLbl, new FlowLayout(FlowLayout.CENTER));\r\n        selectionPnl.add(generalTf, new FlowLayout(FlowLayout.CENTER));\r\n        selectionPnl.add(general2Tf, new FlowLayout(FlowLayout.CENTER));\r\n        selectionPnl.add(inquireResBtn, new FlowLayout(FlowLayout.CENTER));\r\n\r\n        centerRightPnl.add(resPnl, BorderLayout.NORTH);\r\n        centerRightPnl.add(selectionPnl, BorderLayout.SOUTH);\r\n\r\n        setCenterTitleLblText(\"Inquire Reservation\");\r\n\r\n        centerPnl.add(centerTitleLbl, BorderLayout.NORTH);\r\n        centerPnl.add(inquireHotelLeftPanel(), BorderLayout.WEST);\r\n        centerPnl.add(centerRightPnl, BorderLayout.EAST);\r\n\r\n        this.add(centerPnl);\r\n        this.revalidate();\r\n        this.repaint();\r\n    }\r\n\r\n    public void removeReservation(int roomCount, String[][] reservationNames){\r\n        this.remove(centerPnl);\r\n\r\n        JPanel centerRightPnl = new JPanel(new FlowLayout(FlowLayout.CENTER));\r\n        centerRightPnl.setPreferredSize(new Dimension(CENTER_MAIN_WIDTH, CENTER_MAIN_HEIGHT));\r\n        centerRightPnl.setBackground(Color.decode(\"#304D30\"));\r\n       \r\n        centerPnl = new JPanel();\r\n        centerPnl.setLayout(new BorderLayout());\r\n        \r\n        JPanel resPnl = new JPanel();\r\n        resPnl.setPreferredSize(new Dimension(CENTER_MAIN_WIDTH, 315));\r\n        resPnl.setLayout(new FlowLayout(FlowLayout.CENTER));\r\n        resPnl.setBackground(Color.decode(\"#304D30\"));\r\n\r\n        JPanel selectionPnl = new JPanel(new FlowLayout());\r\n        selectionPnl.setPreferredSize(new Dimension(CENTER_MAIN_WIDTH, 150));\r\n        selectionPnl.setLayout(new FlowLayout(FlowLayout.CENTER));\r\n        selectionPnl.setBackground(Color.decode(\"#304D30\"));\r\n\r\n        this.generalTf = new JTextField();\r\n        this.general2Tf = new JTextField();\r\n        generalTf.setPreferredSize(new Dimension(TF_WIDTH/2-3, TF_HEIGHT));\r\n        general2Tf.setPreferredSize(new Dimension(TF_WIDTH/2-1, TF_HEIGHT));\r\n\r\n        CLabel selectRoomLbl = new CLabel(\"     [Room]  [Reservation]\", SUBTITLE_HEIGHT, Font.BOLD);\r\n\r\n        resPnl.add(new CLabel(\"Rooms in the hotel: \", SUBTITLE_HEIGHT, Font.BOLD));\r\n        resPnl.add(printReservation(roomCount, reservationNames, CENTER_MAIN_WIDTH -10, 280));\r\n        selectionPnl.add(selectRoomLbl, new FlowLayout(FlowLayout.CENTER));\r\n        selectionPnl.add(generalTf, new FlowLayout(FlowLayout.CENTER));\r\n        selectionPnl.add(general2Tf, new FlowLayout(FlowLayout.CENTER));\r\n        selectionPnl.add(confirmRemoveResBtn, new FlowLayout(FlowLayout.CENTER));\r\n\r\n        centerRightPnl.add(resPnl, BorderLayout.NORTH);\r\n        centerRightPnl.add(selectionPnl, BorderLayout.SOUTH);\r\n\r\n        setCenterTitleLblText(\"Remove Reservation\");\r\n\r\n        centerPnl.add(centerTitleLbl, BorderLayout.NORTH);\r\n        centerPnl.add(manageHotelLeftPanel(), BorderLayout.WEST);\r\n        centerPnl.add(centerRightPnl, BorderLayout.EAST);\r\n\r\n        this.add(centerPnl);\r\n        this.revalidate();\r\n        this.repaint();\r\n    }\r\n\r\n    public void removeHotel(){\r\n        this.remove(centerPnl);\r\n\r\n        JPanel centerRightPnl = new JPanel(new FlowLayout(FlowLayout.CENTER));\r\n        centerRightPnl.setPreferredSize(new Dimension(CENTER_MAIN_WIDTH, CENTER_MAIN_HEIGHT));\r\n        centerRightPnl.setBackground(Color.decode(\"#304D30\"));\r\n\r\n        centerPnl = new JPanel();\r\n        centerPnl.setLayout(new BorderLayout());\r\n        centerPnl.setBackground(Color.decode(\"#304D30\"));\r\n\r\n        setCenterTitleLblText(\"Remove Hotel\");\r\n\r\n        centerRightPnl.add(new CLabel(\"                                 \", SUBTITLE_HEIGHT, Font.BOLD));\r\n        centerRightPnl.add(new CLabel(\"                                 \", SUBTITLE_HEIGHT, Font.BOLD));\r\n        centerRightPnl.add(new CLabel(\"You can only remove a hotel \", 12, Font.ITALIC));\r\n        centerRightPnl.add(new CLabel(\"that has no reservations\", 12, Font.ITALIC));\r\n        centerRightPnl.add(new CLabel(\"                                               \", SUBTITLE_HEIGHT, Font.BOLD));\r\n        centerRightPnl.add(new CLabel(\"Are you sure?\", 14, Font.PLAIN));\r\n        centerRightPnl.add(new CLabel(\"This action cannot be undone\", 14, Font.BOLD));\r\n        centerRightPnl.add(confirmRemoveHotelBtn);\r\n\r\n        centerPnl.add(centerTitleLbl, BorderLayout.NORTH);\r\n        centerPnl.add(manageHotelLeftPanel(), BorderLayout.WEST);\r\n        centerPnl.add(centerRightPnl, BorderLayout.EAST);\r\n\r\n        this.add(centerPnl);\r\n        this.revalidate();\r\n        this.repaint();\r\n    }\r\n\r\n    public JScrollPane printPricePerDate(double[] prices, int width, int height){\r\n        int num;\r\n\r\n        JPanel mainPricePnl = new JPanel();\r\n        mainPricePnl.setLayout(new BoxLayout(mainPricePnl, BoxLayout.Y_AXIS));\r\n        mainPricePnl.setMaximumSize(new Dimension(width, height));\r\n        mainPricePnl.setBackground(Color.decode(\"#EEF0E5\"));\r\n\r\n        for(int i = 0; i < prices.length; i++){\r\n            num = i + 1;\r\n            String lbl = \"Day \" + num + \": \" + prices[i] + \"%\";\r\n            CLabel room = new CLabel(lbl);\r\n            room.setFont(new Font(DEFAULT_FONT, Font.PLAIN, 12));\r\n            room.setPreferredSize(new Dimension(BTN_WIDTH-10, 20));\r\n            room.setMaximumSize(new Dimension(width, 20));\r\n            room.setForeground(Color.decode(\"#304D30\"));\r\n\r\n            mainPricePnl.add(room);\r\n\r\n        }\r\n\r\n        JScrollPane printRoomsScrPane = new JScrollPane(mainPricePnl);\r\n        printRoomsScrPane.setPreferredSize(new Dimension(width, height));\r\n        printRoomsScrPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);\r\n        printRoomsScrPane.setBackground(Color.decode(\"#EEF0E5\"));\r\n\r\n        return printRoomsScrPane;\r\n    }\r\n\r\n    public JScrollPane printRooms(String[] roomNames, int width, int height){\r\n        int num;\r\n        \r\n        JPanel mainRoomPnl = new JPanel();\r\n        mainRoomPnl.setLayout(new BoxLayout(mainRoomPnl, BoxLayout.Y_AXIS));\r\n        mainRoomPnl.setMaximumSize(new Dimension(width, height));\r\n        mainRoomPnl.setBackground(Color.decode(\"#EEF0E5\"));\r\n\r\n        for(int i = 0; i < roomNames.length; i++){\r\n            num = i + 1;\r\n            String lbl = \"[\" + num + \"] \" + roomNames[i];\r\n            CLabel room = new CLabel(lbl);\r\n            room.setFont(new Font(DEFAULT_FONT, Font.PLAIN, 12));\r\n            room.setPreferredSize(new Dimension(BTN_WIDTH-10, 20));\r\n            room.setMaximumSize(new Dimension(width, 20));\r\n            room.setForeground(Color.decode(\"#304D30\"));\r\n            \r\n            mainRoomPnl.add(room);\r\n         \r\n        }\r\n\r\n        JScrollPane printRoomsScrPane = new JScrollPane(mainRoomPnl);\r\n        printRoomsScrPane.setPreferredSize(new Dimension(width+5, height));\r\n        printRoomsScrPane.setBackground(Color.decode(\"#EEF0E5\"));\r\n        printRoomsScrPane.setBorder(BorderFactory.createEmptyBorder());\r\n\r\n        return printRoomsScrPane;\r\n    }\r\n\r\n    public JScrollPane printReservation(int roomCount, String[][] reservationNames, int width, int height){\r\n        System.out.println(\"PRINT Reservations\"); // CHECKER\r\n        int num = 0;\r\n        int roomNum = 0;\r\n\r\n        JPanel mainRoomPnl = new JPanel();\r\n        mainRoomPnl.setLayout(new BoxLayout(mainRoomPnl, BoxLayout.Y_AXIS));\r\n        mainRoomPnl.setMaximumSize(new Dimension(width, height));\r\n        mainRoomPnl.setBackground(Color.decode(\"#EEF0E5\"));\r\n\r\n        for(int j = 0; j < roomCount; j++) {\r\n            roomNum = j + 1;\r\n            String roomName = \"Room \" + \"[\" + roomNum + \"]\";\r\n            CLabel room = new CLabel(roomName);\r\n            room.setFont(new Font(DEFAULT_FONT, Font.BOLD, 12));\r\n            room.setPreferredSize(new Dimension(BTN_WIDTH - 10, 20));\r\n            room.setMaximumSize(new Dimension(width, 20));\r\n            room.setForeground(Color.decode(\"#304D30\"));\r\n\r\n            mainRoomPnl.add(room);\r\n\r\n            for (int i = 0; i < reservationNames[0].length; i++) {\r\n                if(reservationNames[j][i] != null) {\r\n\r\n                    num = i + 1;\r\n                    String lbl = \"[\" + num + \"] \" + reservationNames[j][i];\r\n                    CLabel res = new CLabel(lbl);\r\n                    res.setFont(new Font(DEFAULT_FONT, Font.PLAIN, 12));\r\n                    res.setPreferredSize(new Dimension(BTN_WIDTH - 10, 20));\r\n                    res.setMaximumSize(new Dimension(width, 20));\r\n                    res.setForeground(Color.decode(\"#304D30\"));\r\n\r\n                    mainRoomPnl.add(res);\r\n                } else if (i == 0) {\r\n                    CLabel res = new CLabel(\"No reservations\");\r\n                    res.setFont(new Font(DEFAULT_FONT, Font.PLAIN, 12));\r\n                    res.setPreferredSize(new Dimension(BTN_WIDTH - 10, 20));\r\n                    res.setMaximumSize(new Dimension(width, 20));\r\n                    res.setForeground(Color.decode(\"#304D30\"));\r\n\r\n                    mainRoomPnl.add(res);\r\n                }\r\n            }\r\n        }\r\n\r\n        JScrollPane printRoomsScrPane = new JScrollPane(mainRoomPnl);\r\n        printRoomsScrPane.setPreferredSize(new Dimension(width, height));\r\n        printRoomsScrPane.setBorder(BorderFactory.createEmptyBorder());\r\n        printRoomsScrPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);\r\n        printRoomsScrPane.setBackground(Color.decode(\"#EEF0E5\"));\r\n\r\n        return printRoomsScrPane;\r\n    }\r\n\r\n    public void printReserveBreakdown(String[] breakdown, int height){\r\n        JPanel mainBreakdownPnl = new JPanel();\r\n        mainBreakdownPnl.setLayout(new BoxLayout(mainBreakdownPnl, BoxLayout.Y_AXIS));\r\n        mainBreakdownPnl.setMaximumSize(new Dimension(Short.MAX_VALUE, height));\r\n        mainBreakdownPnl.setBackground(Color.decode(\"#EEF0E5\"));\r\n\r\n        for (String line : breakdown) {\r\n            CLabel dayPrompt = new CLabel(line);\r\n            dayPrompt.setFont(new Font(DEFAULT_FONT, Font.PLAIN, 12));\r\n            dayPrompt.setPreferredSize(new Dimension(BTN_WIDTH-10, 20));\r\n            dayPrompt.setMaximumSize(new Dimension(Short.MAX_VALUE, 20));\r\n            dayPrompt.setForeground(Color.decode(\"#304D30\"));\r\n\r\n            mainBreakdownPnl.add(dayPrompt);\r\n        }\r\n        \r\n        JScrollPane printBreakdownScrPane = new JScrollPane(mainBreakdownPnl);\r\n        printBreakdownScrPane.setPreferredSize(new Dimension(BTN_WIDTH+5, height));\r\n        printBreakdownScrPane.setBackground(Color.decode(\"#EEF0E5\"));\r\n        printBreakdownScrPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);\r\n        this.resRightPnl.add(printBreakdownScrPane);\r\n        this.resRightPnl.add(finalizeResButton);\r\n        this.resRightPnl.add(cancelResButton);\r\n\r\n        resRightPnl.revalidate();\r\n        resRightPnl.repaint();\r\n    }\r\n\r\n    public void reserveHotel(String[] priceBreakdown){\r\n        this.remove(centerPnl);\r\n\r\n        this.centerPnl = new JPanel();\r\n        this.resRightPnl = new JPanel();\r\n        this.resLeftPnl = new JPanel();\r\n        JPanel addResPnl = new JPanel();\r\n        JPanel headerPnl = new JPanel();\r\n\r\n        centerPnl.setLayout(new BorderLayout());\r\n        centerPnl.setBackground(Color.decode(\"#304D30\"));\r\n\r\n        this.resRightPnl.setLayout(new FlowLayout(FlowLayout.RIGHT));\r\n        this.resRightPnl.setPreferredSize(new Dimension(245, CENTER_MAIN_HEIGHT));\r\n        this.resRightPnl.setBackground(Color.decode(\"#304D30\"));\r\n\r\n        this.resLeftPnl.setLayout(new FlowLayout(FlowLayout.CENTER));\r\n        this.resLeftPnl.setPreferredSize(new Dimension(245, CENTER_MAIN_HEIGHT));\r\n        this.resLeftPnl.setBackground(Color.decode(\"#304D30\"));\r\n\r\n        addResPnl.setPreferredSize(new Dimension(230, 300));\r\n        addResPnl.setLayout(new FlowLayout(FlowLayout.CENTER));\r\n        addResPnl.setBackground(Color.decode(\"#304D30\"));\r\n\r\n        headerPnl.setPreferredSize(new Dimension(BTN_WIDTH, TF_HEIGHT));\r\n        headerPnl.setBackground(Color.decode(\"#304D30\"));\r\n\r\n        this.nameTf = new JTextField();\r\n        this.generalTf = new JTextField();\r\n        this.numCheckInTf = new JTextField();\r\n        this.numCheckOutTf = new JTextField();\r\n        this.promoCodeTf = new JTextField();\r\n        \r\n        this.nameTf.setPreferredSize(new Dimension(TF_WIDTH, TF_HEIGHT));\r\n        this.generalTf.setPreferredSize(new Dimension(SMALL_TF_WIDTH, TF_HEIGHT));\r\n        this.numCheckInTf.setPreferredSize(new Dimension(SMALL_TF_WIDTH, TF_HEIGHT));\r\n        this.numCheckOutTf.setPreferredSize(new Dimension(SMALL_TF_WIDTH, TF_HEIGHT));\r\n        this.promoCodeTf.setPreferredSize(new Dimension(TF_WIDTH, TF_HEIGHT));\r\n\r\n        CLabel nameLbl = new CLabel(\"Guest Name\", SUBTITLE_HEIGHT, Font.BOLD);\r\n        CLabel checkInLbl = new CLabel(\"Check In Date        \", SUBTITLE_HEIGHT, Font.PLAIN);\r\n        CLabel checkOutLbl = new CLabel(\"Check Out Date     \", SUBTITLE_HEIGHT, Font.PLAIN);\r\n        CLabel promoCodeLbl = new CLabel(\"Promo Code\", SUBTITLE_HEIGHT -3, Font.ITALIC);\r\n        CLabel roomIndexLbl = new CLabel(\" Room Type           \", SUBTITLE_HEIGHT, Font.PLAIN);\r\n        CLabel breakdownLbl = new CLabel(\"Price Breakdown\", SUBTITLE_HEIGHT, Font.BOLD);\r\n\r\n        setGeneralTfEditable(false);\r\n        setStandardRoomBtnClickable(true);\r\n        setDeluxeRoomBtnClickable(true);\r\n        setExecutiveRoomBtnClickable(true);\r\n        setConfirmResClickable(true);\r\n\r\n        addResPnl.add(checkInLbl);\r\n        addResPnl.add(numCheckInTf);\r\n\r\n        addResPnl.add(checkOutLbl);\r\n        addResPnl.add(numCheckOutTf);\r\n\r\n        addResPnl.add(roomIndexLbl);\r\n        addResPnl.add(generalTf);\r\n\r\n        addResPnl.add(standardRoomBtn);\r\n        addResPnl.add(deluxeRoomBtn);\r\n        addResPnl.add(executiveRoomBtn);\r\n\r\n        addResPnl.add(promoCodeLbl);\r\n        addResPnl.add(promoCodeTf);\r\n\r\n        addResPnl.add(this.confirmResBtn);\r\n\r\n        resLeftPnl.add(nameLbl);\r\n        resLeftPnl.add(nameTf);\r\n\r\n        resLeftPnl.add(addResPnl);\r\n\r\n        headerPnl.add(breakdownLbl);\r\n\r\n        resRightPnl.add(headerPnl);\r\n\r\n        setCenterTitleLblText(\"Create a Booking\");\r\n\r\n        centerPnl.add(centerTitleLbl, BorderLayout.NORTH);\r\n        centerPnl.add(this.resLeftPnl, BorderLayout.WEST);\r\n        centerPnl.add(this.resRightPnl, BorderLayout.EAST);\r\n        this.add(centerPnl);\r\n\r\n        this.revalidate();\r\n        this.repaint();\r\n    }\r\n\r\n    public void setLoginListener(ActionListener actionListener){\r\n        this.loginBtn.addActionListener(actionListener);\r\n    }\r\n\r\n    public void setCreateManagerListener(ActionListener actionListener){\r\n        this.createManagerBtn.addActionListener(actionListener);\r\n    }\r\n\r\n    public void setDeleteManagerListener(ActionListener actionListener){\r\n        this.deleteManagerBtn.addActionListener(actionListener);\r\n    }\r\n\r\n    public void setDeleteHotelListListener(ActionListener actionListener){\r\n        this.deleteHotelList.addActionListener(actionListener);\r\n    }\r\n\r\n    public void setConfirmDeleteManagerListener(ActionListener actionListener){\r\n        this.confirmDeleteManagerBtn.addActionListener(actionListener);\r\n    }\r\n\r\n    public void setConfirmDeleteHotelListListener(ActionListener actionListener){\r\n        this.confirmDeleteHotelListBtn.addActionListener(actionListener);\r\n    }\r\n\r\n    public void setGuestListener(ActionListener actionListener){\r\n        this.guestBtn.addActionListener(actionListener);\r\n    }\r\n\r\n    public void setRegisterBtnListener(ActionListener actionListener){\r\n        this.registerBtn.addActionListener(actionListener);\r\n    }\r\n\r\n    public void setCancelRegisterBtnListener(ActionListener actionListener){\r\n        this.cancelRegisterBtn.addActionListener(actionListener);\r\n    }\r\n    \r\n\r\n    public void setCreateListener(ActionListener actionListener){\r\n        this.createBtn.addActionListener(actionListener);\r\n    }\r\n\r\n    public void setOpenListener(ActionListener actionListener){\r\n        this.openBtn.addActionListener(actionListener);\r\n    }\r\n\r\n    public void setConfirmListener(ActionListener actionListener){\r\n        this.confirmBtn.addActionListener(actionListener);\r\n    }\r\n\r\n    public void setSelectListener(ActionListener actionListener){\r\n        this.selectBtn.addActionListener(actionListener);\r\n    }\r\n\r\n    public void setBackListener(ActionListener actionListener){\r\n        this.backBtn.addActionListener(actionListener);\r\n    }\r\n\r\n    public void setSaveListener(ActionListener actionListener){\r\n        this.saveBtn.addActionListener(actionListener);\r\n    }\r\n\r\n    public void setConfirmSaveListener(ActionListener actionListener){\r\n        this.confirmSaveBtn.addActionListener(actionListener);\r\n    }\r\n\r\n    public void setLoadListener(ActionListener actionListener){\r\n        this.loadBtn.addActionListener(actionListener);\r\n    }\r\n\r\n    public void setConfirmLoadListener(ActionListener actionListener){\r\n        this.confirmLoadBtn.addActionListener(actionListener);\r\n    }\r\n\r\n    public void setLogoutListener(ActionListener actionListener){\r\n        this.logoutBtn.addActionListener(actionListener);\r\n    }\r\n\r\n    public void setInquireListener(ActionListener actionListener){\r\n        this.inquireBtn.addActionListener(actionListener);\r\n    }\r\n\r\n    public void setManageListener(ActionListener actionListener){\r\n        this.manageBtn.addActionListener(actionListener);\r\n    }\r\n\r\n    public void setReserveListener(ActionListener actionListener){\r\n        this.reserveBtn.addActionListener(actionListener);\r\n    }\r\n\r\n    public void setConfirmResListener(ActionListener actionListener){\r\n        this.confirmResBtn.addActionListener(actionListener);\r\n    }\r\n\r\n    public void setFinalizeResListener(ActionListener actionListener){\r\n        this.finalizeResButton.addActionListener(actionListener);\r\n    }\r\n\r\n    public void setCancelResListener(ActionListener actionListener){\r\n        this.cancelResButton.addActionListener(actionListener);\r\n    }\r\n\r\n    public void setStandardRoomListener(ActionListener actionListener){\r\n        this.standardRoomBtn.addActionListener(actionListener);\r\n    }\r\n\r\n    public void setDeluxeRoomListener(ActionListener actionListener){\r\n        this.deluxeRoomBtn.addActionListener(actionListener);\r\n    }\r\n\r\n    public void setExecutiveRoomListener(ActionListener actionListener){\r\n        this.executiveRoomBtn.addActionListener(actionListener);\r\n    }\r\n\r\n    public void setInquireHotelListener(ActionListener actionListener){\r\n        this.iHotelBtn.addActionListener(actionListener);\r\n    }\r\n\r\n    public void setInquireRoomListener(ActionListener actionListener){\r\n        this.iRoomBtn.addActionListener(actionListener);\r\n    }\r\n\r\n    public void setInquireSelectRoomListener(ActionListener actionListener){\r\n        this.selectRoomBtn.addActionListener(actionListener);\r\n    }\r\n\r\n    public void setInquireReservationListener(ActionListener actionListener){\r\n        this.iResBtn.addActionListener(actionListener);\r\n    }\r\n\r\n    public void setInquireDateListener(ActionListener actionListener){\r\n        this.iDateBtn.addActionListener(actionListener);\r\n    }\r\n\r\n    public void setRenameHotelListener(ActionListener actionListener){\r\n        this.renameBtn.addActionListener(actionListener);\r\n    }\r\n\r\n    public void setAddRoomListener(ActionListener actionListener){\r\n        this.addRoomBtn.addActionListener(actionListener);\r\n    }\r\n\r\n    public void setRemoveRoomListener(ActionListener actionListener){\r\n        this.removeRoomBtn.addActionListener(actionListener);\r\n    }\r\n\r\n    public void setUpdatePriceListener(ActionListener actionListener){\r\n        this.updatePriceBtn.addActionListener(actionListener);\r\n    }\r\n\r\n    public void setDatePriceListener(ActionListener actionListener){\r\n        this.datePriceBtn.addActionListener(actionListener);\r\n    }\r\n\r\n    public void setRemoveResListener(ActionListener actionListener){\r\n        this.removeReservationBtn.addActionListener(actionListener);\r\n    }\r\n\r\n    public void setRemoveHotelListener(ActionListener actionListener){\r\n        this.removeHotelBtn.addActionListener(actionListener);\r\n    }\r\n\r\n    public void setConfirmRenameListener(ActionListener actionListener){\r\n        this.confirmRenameBtn.addActionListener(actionListener);\r\n    }\r\n\r\n    public void setConfirmAddRmBtnListener(ActionListener actionListener){\r\n        this.confirmAddRmBtn.addActionListener(actionListener);\r\n    }\r\n\r\n    public void setConfirmRemoveRmListener(ActionListener actionListener){\r\n        this.confirmRemoveRmBtn.addActionListener(actionListener);\r\n    }\r\n\r\n    public void setConfirmUpdatePriceListener(ActionListener actionListener){\r\n        this.confirmUpdatePriceBtn.addActionListener(actionListener);\r\n    }\r\n\r\n    public void setConfirmDatePriceListener(ActionListener actionListener){\r\n        this.confirmDatePriceBtn.addActionListener(actionListener);\r\n    }\r\n\r\n    public void setConfirmRemoveResListener(ActionListener actionListener){\r\n        this.confirmRemoveResBtn.addActionListener(actionListener);\r\n    }\r\n\r\n    public void setConfirmRemoveHotelListener(ActionListener actionListener){\r\n        this.confirmRemoveHotelBtn.addActionListener(actionListener);\r\n    }\r\n\r\n    public void setDateButtonsListener(ActionListener actionListener){\r\n        for(int i = 0; i<30; i++){\r\n            this.dateButtons[i].addActionListener(actionListener);\r\n        }\r\n    }\r\n\r\n    public void setDateBackButtonListener(ActionListener actionListener){\r\n        this.dateBackBtn.addActionListener(actionListener);\r\n    }\r\n\r\n    public void setInquireResButtonLstener(ActionListener actionListener){\r\n        this.inquireResBtn.addActionListener(actionListener);\r\n    }\r\n\r\n\r\n    public void setFeedbackLblText(String text) {\r\n        this.feedbackLbl.setText(text);\r\n    }\r\n\r\n    public void setCenterTitleLblText(String text) {\r\n        this.centerTitleLbl.setText(text);\r\n    }\r\n\r\n    public String getHotelNameTfText() {\r\n        return this.hotelNameTf.getText();\r\n    }\r\n\r\n    public String getNewNameTfText() {\r\n        return this.newNameTf.getText();\r\n    }\r\n\r\n    public String getGeneral2TfText() {\r\n        return this.general2Tf.getText();\r\n    }\r\n\r\n    public String getCreateManagerNameTfText() {\r\n        return this.createManagerTf.getText();\r\n    }\r\n\r\n    public String getCreateManagerPwTfText() {\r\n        String password = new String(this.createManagerPwTf.getPassword());\r\n        return password;\r\n    }\r\n\r\n    public String getLoginPwTfText(){\r\n        String password = new String(this.loginPwTf.getPassword());\r\n        return password;\r\n    }\r\n\r\n    public String getNumStandardTf(){\r\n        return this.numStandardTf.getText();\r\n    }\r\n\r\n    public String getNumDeluxeTf(){\r\n        return this.numDeluxeTf.getText();\r\n    }\r\n\r\n    public String getNumExecutiveTf(){\r\n        return this.numExecutiveTf.getText();\r\n    }\r\n\r\n    public String getNumCheckInTf(){\r\n        return this.numCheckInTf.getText();\r\n    }\r\n\r\n    public String getNumCheckOutTf(){\r\n        return this.numCheckOutTf.getText();\r\n    }\r\n\r\n    public String getGeneralTf(){\r\n        return this.generalTf.getText();\r\n    }\r\n\r\n    public String getPromoCodeTf(){\r\n        return this.promoCodeTf.getText();\r\n    }\r\n\r\n    public String getNameTf(){\r\n        return this.nameTf.getText();\r\n    }\r\n\r\n    public void setGeneralTf(String text){\r\n        this.generalTf.setText(text);\r\n    }\r\n\r\n    public void setConfirmResClickable(Boolean b){\r\n        this.confirmResBtn.setEnabled(b);\r\n    }\r\n\r\n    public void setStandardRoomBtnClickable(Boolean b){\r\n        this.standardRoomBtn.setEnabled(b);\r\n    }\r\n    public void setDeluxeRoomBtnClickable(Boolean b){\r\n        this.deluxeRoomBtn.setEnabled(b);\r\n    }\r\n    public void setExecutiveRoomBtnClickable(Boolean b){\r\n        this.executiveRoomBtn.setEnabled(b);\r\n    }\r\n\r\n    public void setResRightPnl(JScrollPane breakdown){\r\n        this.resRightPnl.add(breakdown);\r\n    }\r\n\r\n    public void deleteResRightPnl(){\r\n        this.remove(resRightPnl);\r\n    }\r\n\r\n    public void setReserveDetailsEditable(Boolean b){\r\n        this.nameTf.setEditable(b);\r\n        this.generalTf.setEditable(b);\r\n        this.numCheckInTf.setEditable(b);\r\n        this.numCheckOutTf.setEditable(b);\r\n        this.promoCodeTf.setEditable(b);\r\n        this.deluxeRoomBtn.setEnabled(b);\r\n        this.standardRoomBtn.setEnabled(b);\r\n        this.executiveRoomBtn.setEnabled(b);\r\n    }\r\n\r\n    public void setGeneralTfEditable(Boolean b){\r\n        this.generalTf.setEditable(b);\r\n    }\r\n   \r\n    public int getDateButtonsClickedIndex(Object c){\r\n        for(int i = 0; i<30; i++){\r\n            if(c.equals(dateButtons[i]))\r\n                return i;\r\n        }\r\n\r\n        return -1;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/mvcpack/View.java b/mvcpack/View.java
--- a/mvcpack/View.java	(revision f8a1adc008d05537f56a653397a2d0d2537147f7)
+++ b/mvcpack/View.java	(date 1722343475859)
@@ -188,21 +188,34 @@
         this.repaint();
     }
 
+
+    /**
+     * Removes the center and west panels, then creates new panels for the registration page.
+     * The new panels include a form for new manager registration with a username and password input fields,
+     * a "Create Manager" button, and a "Cancel" button. The form is displayed on the east side of the center panel,
+     * while a logo is displayed on the west side. The center and west panels are then added to the main frame.
+     */
     public void registerPage(){
+        // Remove the previous center and west panels
         this.remove(centerPnl);
         this.remove(westPnl);
 
+        // Create new center panel with a border layout
         centerPnl = new JPanel(new BorderLayout());
         centerPnl.setPreferredSize(new Dimension(MAINFRAME_WIDTH,MAINFRAME_HEIGHT-100));
 
+        // Create new panel for the registration form
         JPanel newPnl = new JPanel(new FlowLayout(FlowLayout.CENTER));
         newPnl.setPreferredSize(new Dimension(MAINFRAME_WIDTH/2, MAINFRAME_HEIGHT));
         newPnl.setBackground(Color.decode("#304D30"));
+
+        // Create text fields for the username and password input
         createManagerTf = new JTextField();
         createManagerPwTf = new JPasswordField();
         createManagerTf.setPreferredSize(new Dimension(TF_WIDTH,TF_HEIGHT));
         createManagerPwTf.setPreferredSize(new Dimension(TF_WIDTH,TF_HEIGHT));
 
+        // Add labels and text fields to the registration form panel
         newPnl.add(new CLabel("                                                                ", SUBTITLE_HEIGHT, Font.BOLD));
         newPnl.add(new CLabel("New Manager Registration", 20, Font.BOLD));
         newPnl.add(new CLabel("Username: ", SUBTITLE_HEIGHT-2, Font.BOLD));
@@ -213,14 +226,18 @@
         newPnl.add(createManagerBtn);
         newPnl.add(cancelRegisterBtn);
 
+        // Create panel for the logo
         JPanel logoPnl = new JPanel();
         logoPnl.setPreferredSize(new Dimension(MAINFRAME_WIDTH / 2 + 2, MAINFRAME_HEIGHT - 100));
         logoPnl.setBackground(Color.decode("#EEF0E5"));
 
+        // Load the image file
         BufferedImage logo = null;
         File logoFile = new File("HRSLogo.png");
         try {
             logo = ImageIO.read(logoFile);
+
+            // Create a label for the logo and add it to the logo panel
             JLabel picLabel = new JLabel(new ImageIcon(logo));
             picLabel.setMaximumSize(new Dimension(MAINFRAME_WIDTH / 2, MAINFRAME_HEIGHT - 100));
             logoPnl.add(picLabel);
@@ -228,24 +245,68 @@
             e.printStackTrace();
         }
 
+        // Set the background color of the center panel
         centerPnl.setBackground(Color.decode("#EEF0E5"));
+
+        // Add the logo panel and registration form panel to the center panel
         centerPnl.add(logoPnl, BorderLayout.WEST);
         centerPnl.add(newPnl, BorderLayout.EAST);
 
+        // Create a new west panel
         westPnl = new JPanel();
         westPnl.setPreferredSize(new Dimension(0,0));
 
+        // Add the center and west panels to the main frame
         this.add(centerPnl, BorderLayout.CENTER);
         this.add(westPnl, BorderLayout.WEST);
+
+        // Update the layout of the main frame
         this.revalidate();
         this.repaint();
     }
+    
 
+/**
+ * Creates the login page for the application.
+ *
+ * This method removes the existing center and west panels from the main frame.
+ * It then creates new components for the login page, such as text fields for username and password,
+ * and buttons for logging in and registering.
+ *
+ * The login page is divided into three main sections: the logo, the login form, and the guest section.
+ * The logo is displayed on the left side of the screen and the login form is displayed on the right side.
+ * The guest section is displayed at the bottom of the screen.
+ *
+ * The method also sets the background color and preferred size for each panel and component.
+ *
+ * Finally, the method adds the new center and west panels to the main frame and updates the layout.
+ *
+ * @return void
+ */
+    /**
+     * Creates the login page for the application.
+     * 
+     * This method removes the existing center and west panels from the main frame.
+     * It then creates new components for the login page, such as text fields for username and password, 
+     * and buttons for logging in and registering.
+     * 
+     * The login page is divided into three main sections: the logo, the login form, and the guest section.
+     * The logo is displayed on the left side of the screen and the login form is displayed on the right side.
+     * The guest section is displayed at the bottom of the screen.
+     * 
+     * The method also sets the background color and preferred size for each panel and component.
+     * 
+     * Finally, the method adds the new center and west panels to the main frame and updates the layout.
+     * 
+     * @return void
+     */
     public void loginPage() {
 
+        // Remove existing center and west panels
         this.remove(centerPnl);
         this.remove(westPnl);
 
+        // Create text fields for username and password
         generalTf = new JTextField();
         generalTf.setPreferredSize(new Dimension(TF_WIDTH, TF_HEIGHT));
         loginPwTf = new JPasswordField();
@@ -253,12 +314,14 @@
         hotelNameTf = new JTextField();
         hotelNameTf.setPreferredSize(new Dimension(TF_WIDTH, TF_HEIGHT));
 
+        // Create new center panel with a border layout
         centerPnl = new JPanel(new BorderLayout());
         JPanel loginPnl = new JPanel(new FlowLayout(FlowLayout.CENTER));
         centerPnl.setPreferredSize(new Dimension(MAINFRAME_WIDTH, MAINFRAME_HEIGHT - 100));
         loginPnl.setPreferredSize(new Dimension(MAINFRAME_WIDTH / 2, MAINFRAME_HEIGHT - 100));
         loginPnl.setBackground(Color.decode("#304D30"));
 
+        //add login components
         loginPnl.add(new CLabel("                                                                ", SUBTITLE_HEIGHT, Font.BOLD));
         loginPnl.add(new CLabel("              Manager Log-In              ", 25, Font.BOLD));
         loginPnl.add(new CLabel("Username: ", SUBTITLE_HEIGHT - 2, Font.BOLD));
@@ -274,10 +337,12 @@
         loginPnl.add(new CLabel("  No account yet? Register now!  ", SUBTITLE_HEIGHT, Font.BOLD));
         loginPnl.add(registerBtn);
 
+        //create logo panel
         JPanel logoPnl = new JPanel();
         logoPnl.setPreferredSize(new Dimension(MAINFRAME_WIDTH / 2 + 2, MAINFRAME_HEIGHT - 100));
         logoPnl.setBackground(Color.decode("#EEF0E5"));
 
+        //load logo
         BufferedImage logo = null;
         File logoFile = new File("HRSLogo.png");
         try {
@@ -289,6 +354,7 @@
             e.printStackTrace();
         }
 
+        //guest panel/bar at the bottom
         JPanel guestPnl = new JPanel(new FlowLayout(FlowLayout.CENTER));
         guestPnl.setPreferredSize(new Dimension(MAINFRAME_WIDTH, 50));
         guestPnl.setBackground(Color.decode("#B6C4B6"));
@@ -312,6 +378,15 @@
         this.repaint();
     }
 
+    /**
+     * Removes the existing center and west panels from the main frame and creates new panels for the home page.
+     * The new panels include a center panel with a background color of #304D30 and a west panel with a background color of #EEF0E5.
+     * The west panel contains buttons for creating, opening, saving, loading, and logging out.
+     * If the managerPresence parameter is true, the west panel also contains buttons for saving and loading.
+     * The center panel is added to the main frame at the center position and the west panel is added at the west position.
+     *
+     * @param  managerPresence  a boolean indicating whether the user has manager privileges
+     */
     public void home(boolean managerPresence){
         this.remove(this.centerPnl);
         this.remove(westPnl);
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AnalysisUIOptions\">\r\n    <option name=\"SCOPE_TYPE\" value=\"3\" />\r\n  </component>\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"c1a3c063-36ad-42a4-9cf8-b9bfbf30ed1b\" name=\"Changes\" comment=\"\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Main.class\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/mvcpack/Controller.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/mvcpack/Controller.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/mvcpack/Model.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/mvcpack/Model.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/mvcpack/View.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/mvcpack/View.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/HotelResSys2/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/HotelResSys2/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/HotelResSys2/HRSLogo.png\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/HotelResSys2/HRSLogo.png\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/HotelResSys2/basepack/Hotel.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/HotelResSys2/basepack/Hotel.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/HotelResSys2/basepack/Manager.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/HotelResSys2/basepack/Manager.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/HotelResSys2/basepack/Reservation.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/HotelResSys2/basepack/Reservation.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/HotelResSys2/basepack/Room.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/HotelResSys2/basepack/Room.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/HotelResSys2/basepack/roompack/Deluxe.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/HotelResSys2/basepack/roompack/Deluxe.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/HotelResSys2/basepack/roompack/Executive.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/HotelResSys2/basepack/roompack/Executive.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/HotelResSys2/basepack/roompack/Standard.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/HotelResSys2/basepack/roompack/Standard.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$1.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$1.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$10.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$10.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$11.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$11.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$12.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$12.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$13.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$13.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$14.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$14.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$15.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$15.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$16.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$16.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$17.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$17.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$18.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$18.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$19.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$19.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$2.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$2.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$20.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$20.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$21.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$21.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$22.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$22.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$23.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$23.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$24.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$24.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$25.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$25.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$26.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$26.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$27.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$27.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$28.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$28.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$29.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$29.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$3.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$3.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$30.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$30.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$31.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$31.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$32.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$32.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$33.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$33.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$34.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$34.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$35.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$35.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$36.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$36.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$37.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$37.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$38.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$38.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$39.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$39.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$4.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$4.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$40.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$40.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$41.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$41.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$42.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$42.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$43.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$43.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$44.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$44.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$5.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$5.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$6.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$6.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$7.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$7.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$8.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$8.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$9.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$9.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Model.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Model.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/View.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/View.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/custompack/CButton.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/custompack/CButton.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/custompack/CLabel.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/custompack/CLabel.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/HotelResSys2/saves/lastModifiedMap.ser\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/HotelResSys2/saves/lastModifiedMap.ser\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/saves/lastModifiedMap.ser\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/saves/lastModifiedMap.ser\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;marieltmdg&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">{\r\n  &quot;selectedUrlAndAccountId&quot;: {\r\n    &quot;url&quot;: &quot;https://github.com/marieltmdg/HotelResSys2.git&quot;,\r\n    &quot;accountId&quot;: &quot;6972d358-50f3-4614-897a-09a7d1766546&quot;\r\n  }\r\n}</component>\r\n  <component name=\"ProblemsViewState\">\r\n    <option name=\"selectedTabId\" value=\"CurrentFile\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;customColor&quot;: &quot;&quot;,\r\n  &quot;associatedIndex&quot;: 6\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2jhACmyF5oeqqqGKdh2kLWqaazb\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;Application.Main.executor&quot;: &quot;Run&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;BonusFeatures&quot;,\r\n    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/marie/OneDrive/Documents/GitHub/HotelResSys2&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\r\n    &quot;project.structure.last.edited&quot;: &quot;Project&quot;,\r\n    &quot;project.structure.proportion&quot;: &quot;0.15&quot;,\r\n    &quot;project.structure.side.proportion&quot;: &quot;0.0&quot;,\r\n    &quot;run.code.analysis.last.selected.profile&quot;: &quot;pProject Default&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.pluginManager&quot;,\r\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\r\n  },\r\n  &quot;keyToStringList&quot;: {\r\n    &quot;ChangesTree.GroupingKeys&quot;: [\r\n      &quot;module&quot;\r\n    ]\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\marie\\OneDrive\\Documents\\GitHub\\HotelResSys2\" />\r\n    </key>\r\n    <key name=\"MoveClassesOrPackagesDialog.RECENTS_KEY\">\r\n      <recent name=\"\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"Main\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"ALTERNATIVE_JRE_PATH\" value=\"temurin-17\" />\r\n      <option name=\"ALTERNATIVE_JRE_PATH_ENABLED\" value=\"true\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"Main\" />\r\n      <module name=\"HotelResSys2\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Application.Main\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-jdk-9f38398b9061-39b83d9b5494-intellij.indexing.shared.core-IU-241.18034.62\" />\r\n        <option value=\"bundled-js-predefined-1d06a55b98c1-0b3e54e931b4-JavaScript-IU-241.18034.62\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"c1a3c063-36ad-42a4-9cf8-b9bfbf30ed1b\" name=\"Changes\" comment=\"\" />\r\n      <created>1721828810214</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1721828810214</updated>\r\n      <workItem from=\"1722232764048\" duration=\"255000\" />\r\n      <workItem from=\"1722306254756\" duration=\"3132000\" />\r\n      <workItem from=\"1722309702816\" duration=\"6987000\" />\r\n      <workItem from=\"1722330697115\" duration=\"1133000\" />\r\n      <workItem from=\"1722331851382\" duration=\"1182000\" />\r\n      <workItem from=\"1722337821444\" duration=\"5273000\" />\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"RECENT_FILTERS\">\r\n      <map>\r\n        <entry key=\"Paths\">\r\n          <value>\r\n            <list>\r\n              <RecentGroup>\r\n                <option name=\"FILTER_VALUES\">\r\n                  <option value=\"file:$PROJECT_DIR$/mvcpack/Model.java\" />\r\n                </option>\r\n              </RecentGroup>\r\n            </list>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State>\r\n              <option name=\"FILTERS\">\r\n                <map>\r\n                  <entry key=\"branch\">\r\n                    <value>\r\n                      <list>\r\n                        <option value=\"menus\" />\r\n                      </list>\r\n                    </value>\r\n                  </entry>\r\n                </map>\r\n              </option>\r\n            </State>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <breakpoints>\r\n        <breakpoint enabled=\"true\" type=\"java-exception\">\r\n          <properties class=\"java.lang.IndexOutOfBoundsException\" package=\"java.lang\" />\r\n          <option name=\"timeStamp\" value=\"1\" />\r\n        </breakpoint>\r\n        <breakpoint enabled=\"true\" log-message=\"true\" log-stack=\"true\" type=\"java-exception\">\r\n          <properties class=\"java.lang.NullPointerException\" package=\"java.lang\" />\r\n          <option name=\"timeStamp\" value=\"2\" />\r\n        </breakpoint>\r\n      </breakpoints>\r\n    </breakpoint-manager>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision f8a1adc008d05537f56a653397a2d0d2537147f7)
+++ b/.idea/workspace.xml	(date 1722343548470)
@@ -8,71 +8,50 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="c1a3c063-36ad-42a4-9cf8-b9bfbf30ed1b" name="Changes" comment="">
-      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Main.class" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/mvcpack/Controller.java" beforeDir="false" afterPath="$PROJECT_DIR$/mvcpack/Controller.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/basepack/Hotel.class" beforeDir="false" afterPath="$PROJECT_DIR$/basepack/Hotel.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/basepack/Hotel.java" beforeDir="false" afterPath="$PROJECT_DIR$/basepack/Hotel.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/basepack/Manager.class" beforeDir="false" afterPath="$PROJECT_DIR$/basepack/Manager.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/basepack/Reservation.class" beforeDir="false" afterPath="$PROJECT_DIR$/basepack/Reservation.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/basepack/Room.class" beforeDir="false" afterPath="$PROJECT_DIR$/basepack/Room.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/basepack/Room.java" beforeDir="false" afterPath="$PROJECT_DIR$/basepack/Room.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/mvcpack/Controller$10.class" beforeDir="false" afterPath="$PROJECT_DIR$/mvcpack/Controller$10.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/mvcpack/Controller$11.class" beforeDir="false" afterPath="$PROJECT_DIR$/mvcpack/Controller$11.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/mvcpack/Controller$12.class" beforeDir="false" afterPath="$PROJECT_DIR$/mvcpack/Controller$12.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/mvcpack/Controller$13.class" beforeDir="false" afterPath="$PROJECT_DIR$/mvcpack/Controller$13.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/mvcpack/Controller$14.class" beforeDir="false" afterPath="$PROJECT_DIR$/mvcpack/Controller$14.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/mvcpack/Controller$15.class" beforeDir="false" afterPath="$PROJECT_DIR$/mvcpack/Controller$15.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/mvcpack/Controller$27.class" beforeDir="false" afterPath="$PROJECT_DIR$/mvcpack/Controller$27.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/mvcpack/Controller$28.class" beforeDir="false" afterPath="$PROJECT_DIR$/mvcpack/Controller$28.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/mvcpack/Controller$29.class" beforeDir="false" afterPath="$PROJECT_DIR$/mvcpack/Controller$29.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/mvcpack/Controller$30.class" beforeDir="false" afterPath="$PROJECT_DIR$/mvcpack/Controller$30.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/mvcpack/Controller$31.class" beforeDir="false" afterPath="$PROJECT_DIR$/mvcpack/Controller$31.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/mvcpack/Controller$32.class" beforeDir="false" afterPath="$PROJECT_DIR$/mvcpack/Controller$32.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/mvcpack/Controller$33.class" beforeDir="false" afterPath="$PROJECT_DIR$/mvcpack/Controller$33.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/mvcpack/Controller$34.class" beforeDir="false" afterPath="$PROJECT_DIR$/mvcpack/Controller$34.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/mvcpack/Controller$35.class" beforeDir="false" afterPath="$PROJECT_DIR$/mvcpack/Controller$35.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/mvcpack/Controller$36.class" beforeDir="false" afterPath="$PROJECT_DIR$/mvcpack/Controller$36.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/mvcpack/Controller$37.class" beforeDir="false" afterPath="$PROJECT_DIR$/mvcpack/Controller$37.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/mvcpack/Controller$38.class" beforeDir="false" afterPath="$PROJECT_DIR$/mvcpack/Controller$38.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/mvcpack/Controller$39.class" beforeDir="false" afterPath="$PROJECT_DIR$/mvcpack/Controller$39.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/mvcpack/Controller$4.class" beforeDir="false" afterPath="$PROJECT_DIR$/mvcpack/Controller$4.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/mvcpack/Controller$40.class" beforeDir="false" afterPath="$PROJECT_DIR$/mvcpack/Controller$40.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/mvcpack/Controller$41.class" beforeDir="false" afterPath="$PROJECT_DIR$/mvcpack/Controller$41.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/mvcpack/Controller$42.class" beforeDir="false" afterPath="$PROJECT_DIR$/mvcpack/Controller$42.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/mvcpack/Controller$43.class" beforeDir="false" afterPath="$PROJECT_DIR$/mvcpack/Controller$43.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/mvcpack/Controller$44.class" beforeDir="false" afterPath="$PROJECT_DIR$/mvcpack/Controller$44.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/mvcpack/Controller$45.class" beforeDir="false" afterPath="$PROJECT_DIR$/mvcpack/Controller$45.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/mvcpack/Controller$46.class" beforeDir="false" afterPath="$PROJECT_DIR$/mvcpack/Controller$46.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/mvcpack/Controller$5.class" beforeDir="false" afterPath="$PROJECT_DIR$/mvcpack/Controller$5.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/mvcpack/Controller$6.class" beforeDir="false" afterPath="$PROJECT_DIR$/mvcpack/Controller$6.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/mvcpack/Controller$7.class" beforeDir="false" afterPath="$PROJECT_DIR$/mvcpack/Controller$7.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/mvcpack/Controller$8.class" beforeDir="false" afterPath="$PROJECT_DIR$/mvcpack/Controller$8.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/mvcpack/Controller$9.class" beforeDir="false" afterPath="$PROJECT_DIR$/mvcpack/Controller$9.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/mvcpack/Controller.class" beforeDir="false" afterPath="$PROJECT_DIR$/mvcpack/Controller.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/mvcpack/Model.class" beforeDir="false" afterPath="$PROJECT_DIR$/mvcpack/Model.class" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/mvcpack/Model.java" beforeDir="false" afterPath="$PROJECT_DIR$/mvcpack/Model.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/mvcpack/View.class" beforeDir="false" afterPath="$PROJECT_DIR$/mvcpack/View.class" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/mvcpack/View.java" beforeDir="false" afterPath="$PROJECT_DIR$/mvcpack/View.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/HotelResSys2/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/HotelResSys2/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/HotelResSys2/HRSLogo.png" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/HotelResSys2/HRSLogo.png" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/HotelResSys2/basepack/Hotel.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/HotelResSys2/basepack/Hotel.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/HotelResSys2/basepack/Manager.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/HotelResSys2/basepack/Manager.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/HotelResSys2/basepack/Reservation.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/HotelResSys2/basepack/Reservation.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/HotelResSys2/basepack/Room.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/HotelResSys2/basepack/Room.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/HotelResSys2/basepack/roompack/Deluxe.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/HotelResSys2/basepack/roompack/Deluxe.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/HotelResSys2/basepack/roompack/Executive.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/HotelResSys2/basepack/roompack/Executive.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/HotelResSys2/basepack/roompack/Standard.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/HotelResSys2/basepack/roompack/Standard.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$1.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$1.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$10.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$10.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$11.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$11.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$12.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$12.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$13.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$13.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$14.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$14.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$15.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$15.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$16.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$16.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$17.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$17.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$18.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$18.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$19.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$19.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$2.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$2.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$20.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$20.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$21.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$21.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$22.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$22.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$23.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$23.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$24.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$24.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$25.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$25.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$26.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$26.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$27.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$27.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$28.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$28.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$29.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$29.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$3.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$3.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$30.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$30.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$31.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$31.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$32.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$32.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$33.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$33.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$34.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$34.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$35.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$35.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$36.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$36.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$37.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$37.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$38.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$38.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$39.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$39.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$4.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$4.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$40.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$40.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$41.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$41.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$42.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$42.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$43.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$43.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$44.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$44.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$5.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$5.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$6.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$6.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$7.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$7.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$8.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$8.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$9.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller$9.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Controller.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Model.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/Model.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/View.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/View.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/custompack/CButton.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/custompack/CButton.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/custompack/CLabel.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/HotelResSys2/mvcpack/custompack/CLabel.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/HotelResSys2/saves/lastModifiedMap.ser" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/HotelResSys2/saves/lastModifiedMap.ser" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/saves/lastModifiedMap.ser" beforeDir="false" afterPath="$PROJECT_DIR$/saves/lastModifiedMap.ser" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/mvcpack/custompack/CButton.class" beforeDir="false" afterPath="$PROJECT_DIR$/mvcpack/custompack/CButton.class" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -113,31 +92,31 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent">{
-  &quot;keyToString&quot;: {
-    &quot;Application.Main.executor&quot;: &quot;Run&quot;,
-    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
-    &quot;git-widget-placeholder&quot;: &quot;BonusFeatures&quot;,
-    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,
-    &quot;last_opened_file_path&quot;: &quot;C:/Users/marie/OneDrive/Documents/GitHub/HotelResSys2&quot;,
-    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
-    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
-    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
-    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
-    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
-    &quot;project.structure.last.edited&quot;: &quot;Project&quot;,
-    &quot;project.structure.proportion&quot;: &quot;0.15&quot;,
-    &quot;project.structure.side.proportion&quot;: &quot;0.0&quot;,
-    &quot;run.code.analysis.last.selected.profile&quot;: &quot;pProject Default&quot;,
-    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.pluginManager&quot;,
-    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
+  <component name="PropertiesComponent"><![CDATA[{
+  "keyToString": {
+    "Application.Main.executor": "Run",
+    "RunOnceActivity.ShowReadmeOnStart": "true",
+    "git-widget-placeholder": "Merging BonusFeatures",
+    "kotlin-language-version-configured": "true",
+    "last_opened_file_path": "C:/Users/marie/OneDrive/Documents/GitHub/HotelResSys2",
+    "node.js.detected.package.eslint": "true",
+    "node.js.detected.package.tslint": "true",
+    "node.js.selected.package.eslint": "(autodetect)",
+    "node.js.selected.package.tslint": "(autodetect)",
+    "nodejs_package_manager_path": "npm",
+    "project.structure.last.edited": "Project",
+    "project.structure.proportion": "0.15",
+    "project.structure.side.proportion": "0.0",
+    "run.code.analysis.last.selected.profile": "pProject Default",
+    "settings.editor.selected.configurable": "preferences.pluginManager",
+    "vue.rearranger.settings.migration": "true"
   },
-  &quot;keyToStringList&quot;: {
-    &quot;ChangesTree.GroupingKeys&quot;: [
-      &quot;module&quot;
+  "keyToStringList": {
+    "ChangesTree.GroupingKeys": [
+      "module"
     ]
   }
-}</component>
+}]]></component>
   <component name="RecentsManager">
     <key name="MoveFile.RECENT_KEYS">
       <recent name="C:\Users\marie\OneDrive\Documents\GitHub\HotelResSys2" />
@@ -183,7 +162,7 @@
       <workItem from="1722309702816" duration="6987000" />
       <workItem from="1722330697115" duration="1133000" />
       <workItem from="1722331851382" duration="1182000" />
-      <workItem from="1722337821444" duration="5273000" />
+      <workItem from="1722337821444" duration="5649000" />
     </task>
     <servers />
   </component>
Index: basepack/Room.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package basepack;\r\n\r\nimport java.io.Serializable;\r\nimport java.text.DecimalFormat;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * The Room class represents a room in a hotel with a name, base price, and a list of reservations.\r\n */\r\npublic abstract class Room implements Serializable {\r\n    private String roomName;\r\n    private double basePrice;\r\n    private ArrayList<Reservation> reservationList;\r\n    private double[] datePricePercentMultiplier;\r\n\r\n    /**\r\n     * Constructs a Room instance with the specified room name.\r\n     * Initializes the base price to 1299 and sets up an empty list of reservations.\r\n     *\r\n     * @param roomName The name of the room.\r\n     */\r\n    public Room(String roomName) {\r\n        this.roomName = roomName;\r\n        this.basePrice = 1299;\r\n        this.reservationList = new ArrayList<Reservation>();\r\n        this.datePricePercentMultiplier = new double[30];\r\n\r\n        for(int i = 0; i < 30; i++){\r\n            datePricePercentMultiplier[i] = 100;\r\n        }\r\n    }\r\n\r\n     /**\r\n     * The getReservationList() methodReturns the list of reservations for this room.\r\n     *\r\n     * @return The list of reservations.\r\n     */\r\n    public ArrayList<Reservation> getReservationList() {\r\n        return reservationList;\r\n    }\r\n\r\n    /**\r\n     * The method getBasePrice() returns the base price as a double value.\r\n     * \r\n     * @return The method getBasePrice() is returning the value of the variable basePrice.\r\n     */\r\n    public double getBasePrice() {\r\n        return basePrice;\r\n    }\r\n\r\n    /**\r\n     * The getDatePricePercent() method returns the price percent multiplier for a given date index.\r\n     *\r\n     * @param index The index of the date.\r\n     * @return The price percent multiplier for the specified date index.\r\n     */\r\n    public double getDatePricePercent(int index){\r\n        return datePricePercentMultiplier[index];\r\n    }\r\n\r\n   /**\r\n    * The getRoomName() method in Java returns the roomName attribute.\r\n    * \r\n    * @return The method getRoomName() is returning the value of the variable roomName.\r\n    */\r\n    public String getRoomName() {\r\n        return roomName;\r\n    }\r\n\r\n    /**\r\n     * The getReservationListCount() method returns the number of reservations in the reservation list.\r\n     *\r\n     * @return The number of reservations.\r\n     */\r\n    public int getReservationListCount() {\r\n        return reservationList.size();\r\n    }\r\n\r\n    /**\r\n     * The getReservationName() method returns the name of the guest for a reservation at the specified index.\r\n     *\r\n     * @param index The index of the reservation.\r\n     * @return The name of the guest.\r\n     */\r\n    public String getReservationName(int index){\r\n        return reservationList.get(index).getGuestName();\r\n    }\r\n\r\n    /**\r\n     * The getResDates() method returns the check-in and check-out dates for a reservation at the specified index.\r\n     *\r\n     * @param index The index of the reservation.\r\n     * @return A string representing the check-in and check-out dates.\r\n     */\r\n    public String getResDates(int index){\r\n        int checkIn = reservationList.get(index).getCheckIn();\r\n        int checkOut = reservationList.get(index).getCheckOut();\r\n\r\n        return \"(\" +checkIn+\"-\"+checkOut +\")\";\r\n    }\r\n\r\n    /**\r\n     * The getResBreakdown() method returns the breakdown of the reservation at the specified index.\r\n     *\r\n     * @param index The index of the reservation.\r\n     * @return An array of strings representing the breakdown of the reservation.\r\n     */\r\n    public String[] getResBreakdown(int index){\r\n        return reservationList.get(index).getReservationBreakdown();\r\n    }\r\n\r\n    /**\r\n     * The method setBasePrice() updates the base price with a new value.\r\n     * \r\n     * @param newPrice The newPrice parameter is a double type variable that represents the new base\r\n     * price value that will be set for an object or instance.\r\n     */\r\n    public void setBasePrice(double newPrice) {\r\n        this.basePrice = newPrice;\r\n    }\r\n\r\n    /**\r\n     * The setDatePrice() method sets the price percent multiplier for a specific date.\r\n     *\r\n     * @param date The date for which the price percent multiplier is to be set.\r\n     * @param percent The price percent multiplier to be set.\r\n     */\r\n    public void setDatePrice(int date, double percent){\r\n        datePricePercentMultiplier[date-1] = percent;\r\n    }\r\n\r\n    /**\r\n     * The addReservation() method creates a new Reservation object with the given name, check-in\r\n     * date, check-out date, and adds it to the reservation list.\r\n     * \r\n     * @param name The name parameter represents the name of the person making the reservation.\r\n     * @param checkIn The check-in date for the reservation. \r\n     * @param checkOut The check-out represents the date when the reservation ends. \r\n     */\r\n    public void addReservation(String name, int checkIn, int checkOut, String[] breakdown){\r\n        reservationList.add(new Reservation(name, checkIn, checkOut, this, breakdown));\r\n    }\r\n\r\n    /**\r\n     * The removeReservation() method removes a reservation from a list based on the provided index.\r\n     * \r\n     * @param index The index parameter specifies the position of the reservation in the\r\n     * reservationList.\r\n     * @return String message if successful or not.\r\n     */\r\n    public String removeReservation(int index){\r\n        if(reservationList.isEmpty()){\r\n            return \"There are no reservations for the selected room\";\r\n        }\r\n\r\n        if (index >= 0 && index < getReservationListCount()) {\r\n            reservationList.remove(reservationList.get(index));\r\n            return \"Reservation removal successful\";\r\n        }\r\n\r\n        return \"Reservation input out of bounds\";\r\n    }\r\n\r\n    /**\r\n     * The method isAvailable() checks if a given time range is available for reservation based on\r\n     * existing reservations.\r\n     * \r\n     * @param checkIn The check-in date of a new reservation that needs to be checked for availability.\r\n     * @param checkOut The check-out date of a reservation. \r\n     * @return true if the property is available for the given check-in and check-out dates, and false otherwise.\r\n     */\r\n    public boolean isAvailable(int checkIn, int checkOut){\r\n        for(Reservation reservation: reservationList){\r\n            if(!(reservation.getCheckOut() <= checkIn || reservation.getCheckIn() >= checkOut)){\r\n                return false;         \r\n            }\r\n        }\r\n        return true;       \r\n    }\r\n\r\n    /**\r\n     * The method getTotalReservationPrice() calculates the total price of all reservations in a list.\r\n     * \r\n     * @return The method getTotalReservationPrice is returning the total price of all reservations\r\n     * in the reservationList.\r\n     */\r\n    public double getTotalReservationPrice(){\r\n        double sum = 0;\r\n\r\n        //iterate reservations and sum their total price\r\n        for(Reservation r: reservationList){\r\n            sum += r.getTotalPrice();\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    /**\r\n     * The method printAvailability() generates a formatted string representing the availability of\r\n     * items for each day within a specified range.\r\n     * \r\n     * @return A formatted string representing the availability status for a range of days. \r\n     */\r\n    public String[] printAvailability() {\r\n        String s[] = new String[]{\"\", \"\", \"\", \"\", \"\"};\r\n\r\n        for (int i = 1; i <= 30; i++) {\r\n            if (isAvailable(i, i + 1)) {\r\n                String dayStr = (i < 10 ? \"[0\" + i + \"]\" : \"[\" + i + \"]\");\r\n                int weekIndex = (i - 1) / 7;  // determine which week the day belongs to\r\n                s[weekIndex] += dayStr;\r\n            }\r\n        }\r\n        return s;\r\n    }\r\n\r\n    /**\r\n     * The method printRoomInfo() prints the room name, price per night, and available check-in dates\r\n     * for a room.\r\n     */\r\n    public void printRoomInfo(){\r\n        System.out.println(\"Room Name: \" + roomName);\r\n        System.out.println(\"Price per Night: \" + basePrice);\r\n        System.out.println(\"Available Check In Dates:\");\r\n        System.out.println(printAvailability());\r\n    }\r\n\r\n     /**\r\n     * The printReservation() method prints out details of a guest's reservation including guest name,\r\n     * stay length, room details, and total price.\r\n     * \r\n     * @param resIndex The index of the reservation.\r\n     */\r\n    public String[] printReservation(int resIndex){\r\n        return reservationList.get(resIndex).printReservation();\r\n    }\r\n\r\n    public abstract double getPriceAfterMultiplier(int date);\r\n\r\n    public double getTotalPriceAfterDiscount(int promoValidity, int checkIn, int checkOut){\r\n        double price = 0;\r\n\r\n        for(int i = checkIn; i < checkOut; i++){\r\n            price += getPriceAfterMultiplier(i); \r\n        }\r\n\r\n        switch(promoValidity){\r\n            case 1:\r\n                price *= 0.9;\r\n                break;\r\n            case 2:\r\n                price -= getPriceAfterMultiplier(checkIn);\r\n                break;\r\n            case 3:\r\n                price *= 0.93;\r\n                break;\r\n            default: price *= 1;\r\n                    break;\r\n\r\n        }\r\n\r\n        DecimalFormat df = new DecimalFormat(\"#0.00\");      \r\n        price = Double.valueOf(df.format(price));\r\n        return price;\r\n    }\r\n\r\n    /**\r\n     * The getPriceAfterDiscountBreakdown() method gets the price per night, given the discount,\r\n     * and the date price modifier.\r\n     *\r\n     * @param promoValidity The promo validity.\r\n     * @param checkIn The check-in date.\r\n     * @param checkOut The check-out date.\r\n     * @return The double[] that lists down the price after discount per night.\r\n     */\r\n    public double[] getPriceAfterDiscountBreakdown(int promoValidity, int checkIn, int checkOut) {\r\n        int numDays = checkOut - checkIn;\r\n        double[] price = new double[numDays];\r\n\r\n        // Initialize price per day\r\n        for (int i = 0; i < numDays; i++) {\r\n            price[i] = getPriceAfterMultiplier(checkIn + i);\r\n        }\r\n\r\n        // Apply discounts based on promoValidity\r\n        switch (promoValidity) {\r\n            case 1: // 10% discount\r\n                for (int i = 0; i < numDays; i++) {\r\n                    price[i] *= 0.9;\r\n                }\r\n                break;\r\n            case 2: // Free first day\r\n                if (numDays > 0) {\r\n                    price[0] = 0.0;\r\n                }\r\n                break;\r\n            case 3: // 7% discount\r\n                for (int i = 0; i < numDays; i++) {\r\n                    price[i] *= 0.93;\r\n                }\r\n                break;\r\n        }\r\n\r\n        for (int i = 0; i < numDays; i++) {\r\n            DecimalFormat df = new DecimalFormat(\"#0.00\");      \r\n            price[i] = Double.valueOf(df.format(price[i]));\r\n        }\r\n        return price;\r\n    }\r\n\r\n    /**\r\n     * the priceBreakdown() method constructs the String[] that will be printed,\r\n     * corresponding to the price breakdown of the entire stay, including the total price.\r\n     *\r\n     * @param promoValidity The promo validity.\r\n     * @param checkIn The check-in date.\r\n     * @param checkOut The check-out date.\r\n     * @return The String[] that lists down the price breakdown per night and its total.\r\n     */\r\n    public String[] priceBreakdown(int promoValidity, int checkIn, int checkOut) {\r\n        int numDays = checkOut - checkIn;\r\n        String[] breakdown = new String[numDays + 1];\r\n        double[] price = getPriceAfterDiscountBreakdown(promoValidity, checkIn, checkOut);\r\n        \r\n        for (int i = 0; i < numDays; i++) {\r\n            DecimalFormat df = new DecimalFormat(\"#,##0.00\");    \r\n            String priceString = df.format(price[i]);  \r\n            int currentDay = checkIn + i;\r\n            switch (promoValidity) {\r\n                case 1: // 10% discount\r\n                case 3: // 7% discount\r\n                    breakdown[i] = \"Day \" + currentDay + \" - \" + (currentDay+1) + \" : P\" + priceString;\r\n                    break;\r\n                case 2: // Free first day\r\n                    if (i == 0) {\r\n                        breakdown[i] = \"Promo Redeemed. Free\";\r\n                    } else {\r\n                        breakdown[i] = \"Day \" + currentDay + \" - \" + (currentDay+1) + \" : P\" + priceString;\r\n                    }\r\n                    break;\r\n                default: // No discount\r\n                    breakdown[i] = \"Day \" + currentDay + \" - \" + (currentDay+1) + \" : P\" + priceString;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        double totalPrice = getTotalPriceAfterDiscount(promoValidity, checkIn, checkOut);\r\n        DecimalFormat df = new DecimalFormat(\"#,##0.00\");    \r\n        String totalPriceString = df.format(totalPrice);  \r\n        breakdown[breakdown.length-1] = \"The Total Price is P\" + totalPriceString;\r\n\r\n        return breakdown;\r\n    }\r\n\r\n    /**\r\n     * The setResTotalPrice() method sets the total price of the most recent reservation after applying any discounts.\r\n     *\r\n     * @param promoValidity The validity period of the promotion.\r\n     * @param checkIn The check-in date.\r\n     * @param checkOut The check-out date.\r\n     */\r\n    public void setResTotalPrice(int promoValidity, int checkIn, int checkOut){\r\n        reservationList.get(reservationList.size()-1).setTotalPrice(promoValidity, checkIn, checkOut);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/basepack/Room.java b/basepack/Room.java
--- a/basepack/Room.java	(revision f8a1adc008d05537f56a653397a2d0d2537147f7)
+++ b/basepack/Room.java	(date 1722343475536)
@@ -236,6 +236,14 @@
 
     public abstract double getPriceAfterMultiplier(int date);
 
+    /**
+     * Calculates the total price after discount based on the promo validity, check-in date, and check-out date.
+     *
+     * @param  promoValidity   the promo validity code
+     * @param  checkIn         the check-in date
+     * @param  checkOut        the check-out date
+     * @return                 the total price after discount
+     */
     public double getTotalPriceAfterDiscount(int promoValidity, int checkIn, int checkOut){
         double price = 0;
 
@@ -244,20 +252,21 @@
         }
 
         switch(promoValidity){
-            case 1:
+            case 1://I_WORK_HERE
                 price *= 0.9;
                 break;
-            case 2:
+            case 2://STAY4_GET1
                 price -= getPriceAfterMultiplier(checkIn);
                 break;
-            case 3:
+            case 3://PAYDAY
                 price *= 0.93;
                 break;
-            default: price *= 1;
-                    break;
+            default: 
+                price *= 1;
+                break;
 
         }
-
+        //round price to 2 decimal places
         DecimalFormat df = new DecimalFormat("#0.00");      
         price = Double.valueOf(df.format(price));
         return price;
